import maybe.*;
import newclay.ast as ast;
import newclay.ir as ir;
import newclay.core.*;
import newclay.hooks.*;
import newclay.evaluator.*;

record SpecializationContext (
    body: Pointer[Vector[ir.Node]],
    complete?: Pointer[Bool],
    availableRvalues: HashMap[RTValue, Tuple[]],
);

overload SpecializationContext(body, complete?)
    = SpecializationContext(body, complete?, HashMap[RTValue, Tuple[]]());

private subContext(s:SpecializationContext, subBody:Vector[ir.Node])
    = SpecializationContext(&subBody, s.complete?, s.availableRvalues);
private loopSubContext(s:SpecializationContext, subBody:Vector[ir.Node])
    = SpecializationContext(&subBody, s.complete?, HashMap[RTValue, Tuple[]]());

addRvalue(s, rv:RTValue) {
    if (rv.kind != RT_VALUE_RVALUE)
        return rv;

    assert(null?(lookup(s.availableRvalues, rv)), "rvalue introduced more than once");
    s.availableRvalues[rv] = ();
    return rv;
}

overload addRvalue(s, mrvs:Maybe[RTValues])
    = maybe(mrvs, rvs ref=> Maybe(map(rv ref=> addRvalue(s, rv), rvs)));

useRvalue(s, rv:RTValue) {
    if (rv.kind != RT_VALUE_RVALUE)
        return;

    if (null?(lookup(s.availableRvalues, rv)))
        genericError("rvalue used more than once");

    remove(s.availableRvalues, rv);
}

private useSubRvalues(s, subS) {
    s.availableRvalues = subS.availableRvalues;
}

private useBranchRvalues(s, branchS1, branchS2) {
    for (rv, x in items(s.availableRvalues)) {
        if (null?(lookup(branchS1.availableRvalues, rv))
            or null?(lookup(branchS2.availableRvalues, rv)))
            remove(s.availableRvalues, rv);
    }
}


//
// externalAttributes, externalRTValue
//

externalRTValue(x:RTExternal) {
    var attrs = externalAttributes(x);
    var type = externalCodePointerType(attrs.abi, attrs.variadic?, attrs.argumentTypes, attrs.returnType);
    return RTValue(RT_VALUE_RVALUE, type, x, x.name);
}

externalAttributes(ex:RTExternal) = ref maybe(ex.attributes,
    a ref=> ref a,
    () ref=> ref initializeExternalAttributes(ex),
);

private validExternalArgumentType?(type)
    = symbolType?(typeSymbol(type)) and podType?(type);

private initializeExternalAttributes(ex:RTExternal) {
    var env = newEnv(ex.module);

    var attributeValues = maybe(ex.ast.attributes,
        attributes ref=> evaluateExprList(attributes, env),
        () ref=> ValueList(),
    );

    var argumentTypes = ValueList(mapped(a ref=> externalArgumentType(a, env), ex.ast.arguments.items));
    var returnType = maybe(ex.ast.returns, returnExpr ref=> withLocation(returnExpr, () ref=> {
        var returnType = evaluateExpr(returnExpr, env);
        if (not validExternalArgumentType?(returnType))
            genericError("external functions may only return values of POD types");
        return Maybe(returnType);
    }));

    var symbolName = ex.name;
    var abi = getHooks().CdeclABI;
    var variadic? = ex.ast.arguments.variadic?;

    maybe(ex.ast.attributes, attributes ref=> {
        withLocation(ex.ast, () ref=> {
            applyExternalAttributes(attributeValues, symbolName, abi);

            if (not abiSupportsVariadics?(abi) and variadic?)
                genericError("external function with ", abi, " does not support variadic arguments");
        });
    });

    ex.attributes = Maybe(RTExternalAttributes(
        symbolName,
        abi,
        variadic?,
        argumentTypes,
        returnType
    ));

    return ref just(ex.attributes);
}

private applyExternalAttributes(attributeValues, outSymbolName, outAbi) {
    var gotName? = false;
    var gotAbi?  = false;

    for (value in attributeValues)
        match(value,
            StringValue, sv ref=> {
                if (gotName?)
                    genericError("multiple external symbol names specified for external function");
                gotName? = true;
                outSymbolName = sv.value; 
            },
            MatchDefault, x ref=> {
                if (abiValue?(value)) {
                    if (gotAbi?)
                        genericError("multiple ABIs specified for external function");
                    gotAbi? = true;
                    outAbi = value;
                }
            },
        );
}

private externalArgumentType(arg:ast.ExternalArgument, env)
    = withLocation(arg, () ref=> {
        var argType = evaluateExpr(arg.type, env);
        if (not validExternalArgumentType?(argType))
            genericError("external functions may only take values of POD types as arguments");
        return argType;
    });



//
// globalRTValue, globalRTValueList, globalAttributes
//

private analyzeGlobal(g:RTGlobal) {
    ref globalMap = getProgram().globalMap;

    assert(null?(lookup(globalMap.constructors, g)), "unprotected recursive global reference");
    var binding = variantAs(g.head.ast, GlobalBinding);
    return withGlobalAnalysis(g, () ref=>
        withLocation(binding.ast, () ref=> {
            push(globalMap.globalOrder, g);
            var type = analyzeGlobal2(g, binding);
            return RTGlobalAttributes(type);
        })
    );
}

private analyzeGlobal2(g:RTGlobal, binding:GlobalBinding) {
    ref globalMap = getProgram().globalMap;
    var complete? = true;
    var constructorS = SpecializationContext(&globalMap.constructors[g], &complete?);

    return maybe(binding.ast.value,
        valueExpr ref=> {
            var resultTypes = analyzeSubnode(constructorS, g.env, valueExpr);
            assert(complete?, "unresolvable recursion in global initializer");

            return maybe(resultTypes,
                results ref=> {
                    if (size(results) != 1)
                        genericError("single-value global binding gave ", size(results), " results");

                    var type = results[0].type;

                    maybe(binding.ast.type, declaredTypeExpr ref=> {
                        withLocation(declaredTypeExpr, () ref=> {
                            var declaredType = evaluateExpr(declaredTypeExpr, g.env);
                            if (declaredType != type)
                                genericError(
                                    "global variable declared with type ", declaredType,
                                    " but bound to value of type ", type,
                                );
                        });
                    });

                    addSpecializedInitialize(constructorS, valueExpr, results[0], _globalRTValue(g, type));
                    return type;
                },
                () ref=> {
                    genericError("global initializer is nonreturning");
                    return Value();
                },
            );
        },
        () ref=> maybe(binding.ast.type,
            declaredTypeExpr ref=> evaluateExpr(declaredTypeExpr, g.env),
            () ref=> {
                genericError("global variable binding must have a declared type or an initializer expression");
                return Value();
            },
        ),
    );
}

globalAttributes(g:RTGlobal) = safeInitialize(g.attributes, () ref=> analyzeGlobal(g));
globalBinding(g:RTGlobal) = variantAs(g.head.ast, GlobalBinding);
globalKind(g:RTGlobal) {
    switch (globalBinding(g).kind) {
    case ast.BINDING_RVALUE:
        genericError("global variables cannot be rvalues");
        return RTValueKind();
    case ast.BINDING_FORWARD:
        genericError("global variables cannot be forward");
        return RTValueKind();
    case ast.BINDING_ALIAS:
        assert(false, "global alias created as runtime global");
        return RTValueKind();
    case ast.BINDING_REF:
        genericError("global ref bindings not yet supported");
        return RTValueKind();
    case ast.BINDING_CONST:
        genericError("global const bindings not yet supported");
        return RTValueKind();
    default:
        return RT_VALUE_REF;
    }
}

private _globalRTValue(g:RTGlobal, type:Value)
    = RTValue(globalKind(g), type, g);

globalRTValue(g:RTGlobal) = _globalRTValue(g, globalAttributes(g).type);



//
// analyzeMain
//

analyzeMain() {
    var mainValue = envEntryToValue(publicLookup(getProgramMainModule(), "main"));
    return analyzeCallable(mainValue, RTValues());
}


//
// analyzeLiteralCodeBody
//

private analyzeLiteralCodeBody(s:SpecializationContext, env:Env, body:ast.LiteralCodeBody) {
    return addSpecializedLiteralCodeBody(s, env, body);
}


//
// analyzeNode
//

analyzeNode(s:SpecializationContext, env:Env, body:ast.ExprCodeBody)
    = analyzeSubnode(s, newEnv(env), body.exprs);


//
// analyzeNode(ReturnExprList; ReturnExprListItem instances)
//

analyzeExprListNode(s, env, exprList) {
    var outputs = RTValues();
    for (item in exprList) {
        var itemOutputs = analyzeSubnode(s, env, item);
        if (nothing?(itemOutputs))
            return nothing(RTValues);
        push(outputs, just(itemOutputs));
    }
    return Maybe(outputs);
}

analyzeMultiExprListNode(s, env, exprList, multi?) {
    if (multi? and size(exprList) == 1 and variantIs?(exprList[0], ast.Expr))
        return analyzeMultiExprSubnode(s, env, *exprList[0]);
    return analyzeExprListNode(s, env, exprList);
}

overload analyzeNode(s:SpecializationContext, env:Env, exprList:ast.ReturnExprList)
    Maybe[RTValues]
    = analyzeExprListNode(s, env, exprList);

overload analyzeNode(s:SpecializationContext, env:Env, rItem:ast.ReturnExprListItem)
    Maybe[RTValues]
{
    var results = analyzeSubnode(s, env, rItem.item);
    return maybe(results,
        rs ref=> Maybe(map(r ref=> analyzeReturn(s, rItem, r), rs)), 
    );
}

private analyzeReturn(
    s:SpecializationContext,
    rItem:ast.ReturnExprListItem,
    source:RTValue
) = maybe(rItem.kind,
    // reference return
    returnKind ref=> {
        switch (returnKind) {
        case ast.RETURN_EXPR_CONST:
            if (localVariable?(source))
                genericError("cannot return temporary as const reference");
            if (source.kind == RT_VALUE_RVALUE)
                genericError("cannot return rvalue as const reference");
            if (source.kind != RT_VALUE_CONST)
                return singleAddSpecializedBindReturn(s, rItem, source,
                    newReference(RT_VALUE_CONST, source.type, "returned")
                );
            break;
        case ast.RETURN_EXPR_REF:
            if (localVariable?(source))
                genericError("cannot return temporary as ref reference");
            if (source.kind == RT_VALUE_RVALUE)
                genericError("cannot return rvalue as ref reference");
            if (source.kind == RT_VALUE_CONST)
                genericError("cannot return const as ref reference");
            break;
        case ast.RETURN_EXPR_RVALUE:
            if (localVariable?(source))
                genericError("cannot return temporary as rvalue reference");
            if (source.kind == RT_VALUE_CONST)
                genericError("cannot return const as rvalue reference");
            if (source.kind != RT_VALUE_RVALUE)
                return singleAddSpecializedBindReturn(s, rItem, source,
                    newReference(RT_VALUE_RVALUE, source.type, "returned")
                );
            break;
        case ast.RETURN_EXPR_FORWARD:
            if (localVariable?(source)) {
                if (source.kind != RT_VALUE_RVALUE)
                    genericError("cannot forward non-rvalue temporary value");
                return singleAddSpecializedBindReturn(s, rItem, source,
                    newRvalue(source.type, "returned")
                );
            }
            break;
        default:
            assert(false, "invalid reference kind");
            return RTValue();
        }
        return singleAddSpecializedBindReturn(s, rItem, source, cloneVariable(source, "returned"));
    },
    // value return
    () ref=> singleAddSpecializedBindReturn(s, rItem, source, newRvalue(source.type, "returned")),
);


//
// analyzeNode(ExprList; ExprListItem instances)
//

overload analyzeNode(s:SpecializationContext, env:Env, exprList:ast.ExprList) Maybe[RTValues]
    = analyzeExprListNode(s, env, exprList);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.ExprListItem) Maybe[RTValues]
    = analyzeNode(s, env, *expr);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.Expr) Maybe[RTValues]
    = analyzeNode(s, env, *expr);

overload analyzeNode(s:SpecializationContext, env:Env, unpack:ast.UnpackExpr)
    = analyzeMultiExprSubnode(s, env, unpack.expr);


//
// analyzeNode(Expr instances)
//

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.BoolLiteral)
    = addSpecializedValue(s, expr, Value(BoolValue(expr.value)));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.IntLiteral)
    = addSpecializedValue(s, expr, Value(parseIntLiteral(expr.negative?, expr.value)));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.StringLiteral)
    = addSpecializedValue(s, expr, Value(StringValue(parseStringLiteral(expr.value))));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.CharLiteral)
    = addSpecializedValue(s, expr, Value(CharValue(parseCharLiteral(expr.value))));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.FloatLiteral)
    = addSpecializedValue(s, expr, Value(parseFloatLiteral(expr.negative?, expr.value)));

private analyzeEnvEntry(s, expr, envEntry) = match(envEntry,
    RTValue, x ref=> Maybe(RTValues(x)),
    Value, x ref=> addSpecializedValue(s, expr, x),
    ValueList, x ref=>
        genericAnalysisError("multiple values cannot be used in single value context"),
    Alias, x ref=> withAliasRecursionProtection(x,
        () ref=> analyzeSubnode(s, x.env, x.value),
    ),
    ListAlias, x ref=>
        genericAnalysisError("multiple values cannot be used in single value context"),
    PatternCell, x ref=>
        genericAnalysisError("pattern variable cannot be used in non-pattern expression"),
    ListPatternCell, x ref=>
        genericAnalysisError("pattern variable cannot be used in non-pattern expression"),
    RTValueList, x ref=>
        genericAnalysisError("multiple values cannot be used in single value context"),
    RTLabel, x ref=>
        genericAnalysisError("label cannot be used as a value"),
    RTExternal,   x ref=> Maybe(RTValues(addRvalue(s, externalRTValue(x)))),
    RTGlobal,     x ref=> Maybe(RTValues(globalRTValue(x))),
);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.NameRef) {
    var envEntry = nameRefLookup(env, expr);
    return analyzeEnvEntry(s, expr, envEntry);
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.SimpleNameRef) {
    var envEntry = privateLookup(env, expr.name);
    return analyzeEnvEntry(s, expr, envEntry);
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.PatternNameRef)
    = addSpecializedValue(s, expr, derefPattern(env, expr.name));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.TupleExpr) {
    return maybe(analyzeExprListNode(s, env, expr.args),
        args ref=> analyzeCallWithOneResult(s, expr, getHooks().tupleLiteral, args)
    );
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.ArrayExpr) {
    return maybe(analyzeExprListNode(s, env, expr.args),
        args ref=> analyzeCallWithOneResult(s, expr, getHooks().arrayLiteral, args)
    );
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.Call)
    = withOneResult(analyzeCallNode(s, env, expr));

private analyzeCallWithOneResult(s:SpecializationContext, ast, callable:Value, args:RTValues) {
    return withOneResult(analyzeCall(s, ast, callable, args));
}

private analyzeCall(s:SpecializationContext, ast, callable:Value, args:RTValues) {
    return addSpecializedCall(s, ast, args, analyzeCallable(callable, args));
}

private ifStaticValue(s, env, expr, thenFn, elseFn)
    = maybe(analyzeSubnode(s, env, expr),
        results ref=> {
            var result = singleValue(results);
            if (staticType?(result.type))
                return thenFn(staticTypeValue(result.type));
            return elseFn(result);
        },
    );

private withOneResult(mResults) {
    maybe(mResults, results ref=> {
        ensureArity(1, size(results));
    });
    return mResults;
}

private analyzeIndexing(s:SpecializationContext, env:Env, expr:ast.Indexing) {
    return ifStaticValue(s, env, expr.expr,
        staticIndexee ref=> analyzeEnvEntry(s, expr,
            evaluateIndexingEntry(staticIndexee, evaluateExprList(expr.args, env))
        ),
        indexee ref=> maybe(analyzeExprListNode(s, env, expr.args), indexArgs ref=> {
            var operands = RTValues(indexee);
            push(operands, indexArgs);
            return analyzeCall(s, expr, getHooks().index, operands);
        }),
    );
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.Indexing)
    = withOneResult(analyzeIndexing(s, env, expr));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.StaticIndexing) {
    return ifStaticValue(s, env, expr.expr,
        staticIndexee ref=> analyzeEnvEntry(s, expr,
            evaluateIndexingEntry(staticIndexee, ValueList(parseIntLiteral(false, expr.index.value)))
        ),
        indexee ref=> {
            var indexValue = Value(parseIntLiteral(false, expr.index.value));
            var indexArg = singleAddSpecializedStaticValue(s, expr.index, indexValue);
            var operands = RTValues(indexee, indexArg);
            return analyzeCall(s, expr, getHooks().staticIndex, operands);
        }
    );
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.FieldRef) {
    return ifStaticValue(s, env, expr.expr,
        staticIndexee ref=> addSpecializedValue(s, expr,
            evaluateFieldRef(staticIndexee, Value(StringValue(expr.field.str)))
        ),
        indexee ref=> {
            var fieldValue = Value(StringValue(expr.field.str));
            var fieldArg = singleAddSpecializedStaticValue(s, expr, fieldValue);
            var operands = RTValues(indexee, fieldArg);
            return analyzeCall(s, expr, getHooks().fieldRef, operands);
        }
    );
}

private analyzeShortCircuit(s, env, expr, leftValue, LeftBody, RightBody)
    = maybe(analyzeBoolSubnode(s, env, expr.expr1),
        leftResults ref=> {
            var leftResult = singleValue(leftResults);
            var output = RTValue(RT_VALUE_RVALUE, boolType(), LocalVariable());

            var ifNode = ir.If(ir.ASTNode(expr), leftResult,
                Vector[ir.Node](),
                Vector[ir.Node]()
            );

            var leftS = subContext(s, fieldRef(ifNode, LeftBody));
            addSpecializedBind(leftS, ir.ASTNode(expr),
                addImmediate(leftS, boolType(), leftValue),
                output
            );

            var rightS = subContext(s, fieldRef(ifNode, RightBody));
            maybe(analyzeBoolSubnode(rightS, env, expr.expr2),
                results2 ref=> {
                    addSpecializedBind(rightS, ir.ASTNode(expr),
                        singleValue(results2),
                        output
                    );
                },
            );

            useBranchRvalues(s, leftS, rightS);
            addRvalue(s, output);
            addSpecializedNode(s, ifNode);

            return Maybe(RTValues(output));
        },
    );

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.AndExpr)
    = analyzeShortCircuit(s, env, expr, Value(BoolValue(false)), #elseBody, #thenBody);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.OrExpr)
    = analyzeShortCircuit(s, env, expr, Value(BoolValue(true)), #thenBody, #elseBody);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.NotExpr)
    = maybe(analyzeBoolSubnode(s, env, expr.expr), input ref=> {
        var output = newRvalue(boolType());
        addSpecializedNot(s, expr, singleValue(input), output);
        return Maybe(RTValues(output));
    });

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.LambdaExpr)
    = genericAnalysisError("lambda expressions are not yet supported");

private analyzeThrowExprNode(s, env, expr) {
    try {
        maybe(analyzeSubnode(s, env, expr.value), exResult ref=> {
            addSpecializedThrow(s, expr, singleValue(exResult));
        });
    } catch (e:RecursiveAnalysisError) {
        s.complete?^ = false;
    }
    return nothing(RTValues);
}

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.ThrowExpr)
    = analyzeThrowExprNode(s, env, expr);

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.IfExpr)
    = maybe(analyzeBoolSubnode(s, env, expr.condition),
        condResult ref=> {
            var ifNode = ir.If(ir.ASTNode(expr), singleValue(condResult),
                Vector[ir.Node](),
                Vector[ir.Node]()
            );
            addSpecializedNode(s, ifNode);

            var thenRecursive? = false;
            var elseRecursive? = false;
            var thenResult = nothing(RTValues);
            var elseResult = nothing(RTValues);

            var thenS = subContext(s, ifNode.thenBody);
            var elseS = subContext(s, ifNode.elseBody);

            try {
                thenResult = analyzeSubnode(thenS, env, expr.thenPart);
            } catch (e:RecursiveAnalysisError) {
                s.complete?^ = false;
                thenRecursive? = true;
            }

            try {
                elseResult = analyzeSubnode(elseS, env, expr.elsePart);
            } catch (e:RecursiveAnalysisError) {
                s.complete?^ = false;
                elseRecursive? = true;
            }

            if (thenRecursive? and elseRecursive?)
                recursiveAnalysisError();

            useBranchRvalues(s, thenS, elseS);
            var outputs = unifyIfExprBranches(s, expr, ifNode, thenResult, elseResult, thenS, elseS);
            return outputs;
        },
    );

private unifyIfExprReferent(thenv, elsev) {
    if (thenv.kind == RT_VALUE_RVALUE and elsev.kind == RT_VALUE_RVALUE
        and localVariable?(thenv) and localVariable?(elsev))

        return RTValueReferent(LocalVariable());
    else
        return RTValueReferent(ReferenceVariable());
}

private unifyIfExprBranches(s, expr, ifNode, thenResult, elseResult, thenS, elseS)
    = maybe(thenResult,
        thenr ref=> maybe(elseResult,
            elser ref=> {
                var thenv = singleValue(thenr);
                var elsev = singleValue(elser);
                if (thenv.type != elsev.type)
                    genericError("return types in if expression branches do not match");
                var output = RTValue();

                if (thenv.kind == elsev.kind)
                    output = RTValue(thenv.kind, thenv.type,
                        unifyIfExprReferent(thenv, elsev),
                    );
                else
                    output = RTValue(RT_VALUE_RVALUE, thenv.type, LocalVariable());

                addSpecializedBind(thenS, expr, thenv, output);
                addSpecializedBind(elseS, expr, elsev, output);
                addRvalue(s, output);

                return Maybe(RTValues(output));
            },
            () ref=> addRvalue(s, thenResult),
        ),
        () ref=> addRvalue(s, elseResult),
    );

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.PairExpr)
    = maybe(analyzeSubnode(s, env, expr.expr),
        rightResults ref=> {
            var rightResult = singleValue(rightResults);
            var leftResult = singleAddSpecializedStaticValue(s, expr, Value(StringValue(expr.name.str)));
            var operands = RTValues(leftResult, rightResult);
            return analyzeCallWithOneResult(s, expr, getHooks().tupleLiteral, operands);
        },
    );

private analyzeUnaryOp(s, env, expr)
    = maybe(analyzeSubnode(s, env, expr.expr), operands ref=> {
        var operatorCallable = Value();
        switch (expr.operator) {
        case ast.OP_ADDRESS_OF: {
            var operand = singleValue(operands);
            if (operand.kind == RT_VALUE_RVALUE)
                genericError("cannot take the address of an rvalue");
            var output = newRvalue(pointerType(operand.type));
            addSpecializedAddressOf(s, expr, operand, output);
            return Maybe(RTValues(output));
        }
        case ast.OP_PLUS:
            operatorCallable = getHooks().plus;
            break;
        case ast.OP_MINUS:
            operatorCallable = getHooks().minus;
            break;
        case ast.OP_UNPACK:
            operatorCallable = getHooks().unpack;
            break;
        case ast.OP_DEREFERENCE:
            operatorCallable = getHooks().dereference;
            break;
        default:
            assert(false, "invalid unary operator");
            break;
        }
        return analyzeCall(s, expr, operatorCallable, operands);
    });

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.UnaryOpExpr)
    = withOneResult(analyzeUnaryOp(s, env, expr));

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.BinaryOpExpr)
    = maybe(analyzeSubnode(s, env, expr.expr1), operands1 ref=>
        maybe(analyzeSubnode(s, env, expr.expr2), operands2 ref=> {
            var operands = RTValues(singleValue(operands1), singleValue(operands2));
            var operatorCallable = Value();

            switch (expr.operator) {
            case ast.OP_MULTIPLY:
                operatorCallable = getHooks().multiply;
                break;
            case ast.OP_DIVIDE:
                operatorCallable = getHooks().divide;
                break;
            case ast.OP_QUOTIENT:
                operatorCallable = getHooks().quotient;
                break;
            case ast.OP_REMAINDER:
                operatorCallable = getHooks().remainder;
                break;
            case ast.OP_ADD:
                operatorCallable = getHooks().add;
                break;
            case ast.OP_SUBTRACT:
                operatorCallable = getHooks().subtract;
                break;
            case ast.OP_LESSER?:
                operatorCallable = getHooks().lesser?;
                break;
            case ast.OP_LESSER_EQUALS?:
                operatorCallable = getHooks().lesserEquals?;
                break;
            case ast.OP_GREATER?:
                operatorCallable = getHooks().greater?;
                break;
            case ast.OP_GREATER_EQUALS?:
                operatorCallable = getHooks().greaterEquals?;
                break;
            case ast.OP_EQUALS?:
                operatorCallable = getHooks().equals?;
                break;
            case ast.OP_NOT_EQUALS?:
                operatorCallable = getHooks().notEquals?;
                break;
            default:
                assert(false, "invalid binary operator");
                break;
            }
            return analyzeCallWithOneResult(s, expr, operatorCallable, operands);
        })
    );

overload analyzeNode(s:SpecializationContext, env:Env, expr:ast.StaticExpr) {
    var value = evaluateExpr(expr.expr, env);
    return addSpecializedStaticValue(s, expr, value);
}


//
// analyzeBlockCodeBody, analyzeStatement
//

private record ProcResult (
    statement: ast.ReturnStatement,
    results: RTValues,
);

private record ProcContext (
    currentTargetId: ir.BreakTargetId,
    results: Vector[ProcResult],
    recursiveReturn: Maybe[ast.ReturnStatement],
);

overload ProcContext() = ProcContext(ir.BreakTargetId(0), Vector[ProcResult](), Maybe[ast.ReturnStatement]());

private returnTargetId(pc) = ir.BreakTargetId(0);

private nextTargetId(pc) {
    var id = pc.currentTargetId;
    inc(pc.currentTargetId);
    return id;
}

private record BlockContext (
    env: Env,
);

private record LoopContext (
    breakTarget: Maybe[ir.BreakTargetId],
    continueTarget: Maybe[ir.BreakTargetId],
    infiniteLoop?: Bool,
);

overload LoopContext() = LoopContext(nothing(ir.BreakTargetId), nothing(ir.BreakTargetId), false);
overload LoopContext(b:ir.BreakTargetId, c:ir.BreakTargetId, i?:Bool)
    = LoopContext(Maybe(b), Maybe(c), i?);
overload LoopContext(loop:ir.While, infinite?:Bool) {
    var target = loop.label;
    return LoopContext(target, target, infinite?);
}
overload LoopContext(breakBlock:ir.Block, continueBlock:ir.Block) {
    return LoopContext(breakBlock.label, continueBlock.label, false);
}

private record StatementReturn ();
private record StatementNoReturn ();

private variant StatementTarget = Nothing            // statement proceeds to next normally
                                | ir.BreakTargetId   // statement breaks/continues to target
                                | StatementReturn
                                | StatementNoReturn; // statement is nonterminating

overload StatementTarget() = StatementTarget(Nothing());
[F | F == ir.Block or F == ir.While]
overload StatementTarget(frame:F) = StatementTarget(frame.label);
overload StatementTarget(static StatementReturn) = StatementTarget(StatementReturn());
overload StatementTarget(static StatementNoReturn) = StatementTarget(StatementNoReturn());

statementBreaks?(tgt:StatementTarget) = not variantIs?(tgt, Nothing);
statementBreaksAt?(tgt:StatementTarget, frame) = match(tgt,
    ir.BreakTargetId, bt ref=> bt == frame.label,
    MatchDefault, x ref=> false,
);
statementReturns?(tgt:StatementTarget) = variantIs?(tgt, StatementReturn);
statementNoReturn?(tgt:StatementTarget) = variantIs?(tgt, StatementNoReturn);

resultTarget(results:Maybe[RTValues]) = maybe(results,
    r => StatementTarget(),
    () => StatementTarget(StatementNoReturn),
);

private analyzeBlockCodeBody(s:SpecializationContext, env:Env, block:ast.Block)
    = withLocation(block, () ref=> {
        var pc = ProcContext();
        var bc = BlockContext(env);
        var lc = LoopContext();

        var target = analyzeStatement(s, pc, bc, lc, block);

        if (statementBreaks?(target)) {
            assert(statementReturns?(target) or statementNoReturn?(target),
                "procedure body cannot escape procedure"
            );
            // "returns" without results? => nonterminating result
            // "returns" without definite results, but recursive return? => recursion error
            // returns with results? => results
            if (empty?(pc.results)) {
                maybe(pc.recursiveReturn, stmt ref=> {
                    withLocation(stmt, () ref=> {
                        recursiveAnalysisError();
                    });
                });
                return nothing(RTValues);
            } else {
                if (size(pc.results) > 1) {
                    var branches = Vector[RTValues](pc.results[0].results);
                    var results = cloneVariables(pc.results[0].results, "returned");
                    for (resultSet in slicedFrom(pc.results, 1)) {
                        withLocation(resultSet.statement, () ref=> {
                            if (not equalResults?(results, resultSet.results))
                                genericError("return statement types do not match");
                            if (size(results) > 0)
                                push(branches, resultSet.results);
                        });
                    }
                    if (size(results) > 0)
                        addSpecializedPhi(s, branches, results);
                    return Maybe(results);
                } else
                    return Maybe(pc.results[0].results);
            }
        } else {
            // falls through with no results? => void results
            // falls through with nonvoid results? => error (not all branches return)
            // falls through with void results? => void results
            if (not empty?(pc.results))
                for (resultSet in pc.results)
                    if (not empty?(resultSet.results))
                        genericError("not all branches return in block");
            return Maybe(RTValues());
        }
    });

[T] private stmtMaybe(value:Maybe[T], thenFn) = maybe(value,
    thenFn,
    () => StatementTarget(StatementNoReturn)
);

private analyzeStatement(
    s:SpecializationContext,
    pc:ProcContext,
    bc:BlockContext,
    lc:LoopContext,
    stmt:ast.Statement
) StatementTarget = withLocation(stmt, () ref=> analyzeStatement(s, pc, bc, lc, *stmt));

private envAddLabel(env:Env, mLabel:Maybe[ast.LabelDef], ...targets) {
    maybe(mLabel, label ref=> {
        envAdd(env, label.name, RTLabel(label, ...mapValues(x => x.label, ...targets)));
    });
}

overload analyzeStatement(s, pc, bc, lc, block:ast.Block) StatementTarget {
    var blockNode = ir.Block(nextTargetId(pc));
    var blockS = subContext(s, blockNode.body);
    var subbc = BlockContext(newEnv(bc.env));
    envAddLabel(subbc.env, block.label, blockNode);
    var target = StatementTarget();
    for (stmt in block.statements) {
        var statementNode = allocateRef(ir.Statement);
        var statementS = subContext(blockS, statementNode.body);
        target = analyzeStatement(statementS, pc, subbc, lc, stmt);
        useSubRvalues(blockS, statementS);
        addSpecializedNode(blockS, statementNode);
        if (statementBreaks?(target))
            break;
    }

    useSubRvalues(s, blockS);
    addSpecializedNode(s, blockNode);
    if (statementBreaksAt?(target, blockNode))
        return StatementTarget();
    else
        return target;
}

private withAssignmentValues(s, env, stmt, fn)
    = stmtMaybe(analyzeNode(s, env, stmt.to),
        toValues ref=> stmtMaybe(analyzeMultiExprListNode(s, env, stmt.from, size(toValues) != 1),
            fromValues ref=> fn(toValues, fromValues),
        ),
    );

private analyzeInitialize(s, env:Env, stmt) {
    try {
        return withAssignmentValues(s, env, stmt, (toValues, fromValues) ref=> {
            if (size(toValues) != size(fromValues))
                genericError("got ", size(toValues), " values on left side of <-- but ", size(fromValues), " values on right side");
            for (toValue, fromValue in zipped(toValues, fromValues)) {
                if (toValue.kind != RT_VALUE_REF)
                    genericError("values on left side of <-- expression must be non-const lvalues");
                if (toValue.type != fromValue.type)
                    genericError(
                        "type mismatch in <-- expression\n",
                        "  left side:  ", map(x => x.type, toValues),   "\n",
                        "  right side: ", map(x => x.type, fromValues),
                    );
                addSpecializedInitialize(s, stmt, fromValue, toValue);
            }
            return StatementTarget();
        });
    } catch (e:RecursiveAnalysisError) {
    // XXX recursive analysis will need to be an error if it influences delayed propagation of var
    // bindings
        s.complete?^ = false;
        return StatementTarget();
    }
}

private singleAssign(s, stmt, op, toValue, fromValue) {
    return resultTarget(analyzeCall(s, stmt, op, RTValues(toValue, fromValue)));
}

private multiAssign(s, stmt, op, toValues, fromValues) {
    genericError("assignment of multiple values not yet supported");
    return StatementTarget();
}

private analyzeAssign(s, env, stmt) {
    try {
        return withAssignmentValues(s, env, stmt, (toValues, fromValues) ref=> {
            if (size(toValues) != size(fromValues))
                genericError("got ", size(toValues), " values on left side of assignment but ", size(fromValues), " values on right side");

            var operatorCallable = Value();
            switch (stmt.kind) {
            case ast.ASSIGNMENT_ASSIGN:
                operatorCallable = getHooks().assign;
                break;
            case ast.ASSIGNMENT_ADD:
                operatorCallable = getHooks().addAssign;
                break;
            case ast.ASSIGNMENT_SUBTRACT:
                operatorCallable = getHooks().subtractAssign;
                break;
            case ast.ASSIGNMENT_MULTIPLY:
                operatorCallable = getHooks().multiplyAssign;
                break;
            case ast.ASSIGNMENT_DIVIDE:
                operatorCallable = getHooks().divideAssign;
                break;
            case ast.ASSIGNMENT_QUOTIENT:
                operatorCallable = getHooks().quotientAssign;
                break;
            case ast.ASSIGNMENT_REMAINDER:
                operatorCallable = getHooks().remainderAssign;
                break;
            default:
                assert(false, "invalid assignment operator");
                break;
            }

            switch (size(toValues)) {
            case 0:
                return StatementTarget();
            case 1:
                return singleAssign(s, stmt, operatorCallable, singleValue(toValues), singleValue(fromValues));
            default:
                return multiAssign(s, stmt, operatorCallable, toValues, fromValues);
            }
        });
    } catch (e:RecursiveAnalysisError) {
        s.complete?^ = false;
        return StatementTarget();
    }
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.AssignmentStatement) {
    switch (stmt.kind) {
    case ast.ASSIGNMENT_INITIALIZE:
        return analyzeInitialize(s, bc.env, stmt);
    default:
        return analyzeAssign(s, bc.env, stmt);
    }
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.BindingStatement) {
    var subenv, target = ...analyzeBindings(s, bc.env, stmt, stmt.kind, stmt.bindings);
    bc.env = subenv;
    return target;
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.ReturnStatement) {
    try {
        maybe(analyzeNode(s, bc.env, stmt.values),
            results ref=> {
                push(pc.results, ProcResult(stmt, results));
                addSpecializedNode(s, ir.Break(stmt, returnTargetId(pc)));
            },
        );
    } catch (e:RecursiveAnalysisError) {
        s.complete?^ = false;
        pc.recursiveReturn = Maybe(stmt);
    }
    return StatementTarget(StatementReturn);
}

private envEntryToLabel(stmtName, entry) = match(entry,
    RTLabel, label ref=> label,
    MatchDefault, x ref=> {
        genericError(StaticName(stmtName), " target must be a label");
        return RTLabel();
    }
);

private breakTarget(stmtName, bc:BlockContext, lc:LoopContext, labelName:Maybe[ast.Identifier])
    = maybe(labelName,
        label ref=> fieldRef(
            envEntryToLabel(stmtName, privateLookup(bc.env, label)),
            IdentifierConcat(stmtName, #"Target"),
        ),
        () ref=> maybe(fieldRef(lc, IdentifierConcat(stmtName, #"Target")),
            target ref=> target,
            () ref=> {
                genericError(StaticName(stmtName), " statement cannot be used outside of a loop without a label");
                return ir.BreakTargetId();
            }
        ),
    );

overload analyzeStatement(s, pc, bc, lc, stmt:ast.BreakStatement) {
    var target = breakTarget(#"break", bc, lc, stmt.label);
    //XXX clear infiniteLoop? at While analysis level: lc.infiniteLoop? = false;
    addSpecializedNode(s, ir.Break(stmt, target));
    return StatementTarget(target);
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.ContinueStatement) {
    var target = breakTarget(#"continue", bc, lc, stmt.label);
    addSpecializedNode(s, ir.Continue(stmt, target));
    return StatementTarget(target);
}

private branchStatementTarget(thenTarget, elseTarget) {
    if (not statementBreaks?(thenTarget) or not statementBreaks?(elseTarget))
        return StatementTarget();
    if (thenTarget == elseTarget)
        return thenTarget;
    if (statementNoReturn?(thenTarget))
        return elseTarget;
    if (statementNoReturn?(elseTarget))
        return thenTarget;
    return StatementTarget(max(
        variantAs(thenTarget, ir.BreakTargetId),
        variantAs(elseTarget, ir.BreakTargetId),
    ));
}

private analyzeBranch(s, ast, cond, else?, thenAnalysisFn, elseAnalysisFn) {
    var ifNode = ir.If(ir.ASTNode(ast), cond,
        Vector[ir.Node](),
        Vector[ir.Node](),
    );

    var thenRecursive? = false;
    var elseRecursive? = not else?;
    var thenTarget = StatementTarget();
    var elseTarget = StatementTarget();
    var thenS = subContext(s, ifNode.thenBody);
    var elseS = subContext(s, ifNode.elseBody);

    try {
        thenTarget = thenAnalysisFn(thenS);
    } catch (e:RecursiveAnalysisError) {
        thenRecursive? = true;
    }

    if (else?)
        try {
            elseTarget = elseAnalysisFn(elseS);
        } catch (e:RecursiveAnalysisError) {
            elseRecursive? = true;
        }

    if (thenRecursive? and elseRecursive?)
        recursiveAnalysisError();

    useBranchRvalues(s, thenS, elseS);

    addSpecializedNode(s, ifNode);
    return branchStatementTarget(thenTarget, elseTarget);
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.IfStatement)
    = stmtMaybe(analyzeBoolSubnode(s, bc.env, stmt.condition), condResult ref=> {
        return analyzeBranch(
            s, stmt, singleValue(condResult), just?(stmt.elseBody),
            thenS ref=> analyzeStatement(
                thenS,
                pc,
                bc,
                lc,
                stmt.thenBody
            ),
            elseS ref=> analyzeStatement(
                elseS,
                pc,
                bc,
                lc,
                just(stmt.elseBody)
            ),
        );
    });

overload analyzeStatement(s, pc, bc, lc, stmt:ast.StaticForStatement) {
    var blockNode = ir.Block(nextTargetId(pc));
    var blockS = subContext(s, blockNode.body);
    addSpecializedNode(s, blockNode);

    for (valueItem in stmt.values) {
        var target = stmtMaybe(analyzeSubnode(blockS, bc.env, valueItem), forValues ref=> {
            for (value in forValues) {
                var subNode = ir.Block(nextTargetId(pc));
                var subS = subContext(blockS, subNode.body);
                addSpecializedNode(blockS, subNode);

                var forEnv = newEnv(bc.env);
                var forValue = addCapture(subS, stmt, value, stmt.bodyBinding.str);

                envAddLabel(forEnv, stmt.label, blockNode, subNode);
                envAdd(forEnv, stmt.bodyBinding, forValue);

                var bodyTarget = analyzeStatement(
                    subS,
                    pc,
                    BlockContext(forEnv),
                    LoopContext(blockNode, subNode),
                    stmt.body
                );

                if (statementBreaks?(bodyTarget) and not statementBreaksAt?(bodyTarget, subNode))
                    return bodyTarget;
            }
            return StatementTarget();
        });
        if (statementBreaks?(target)) {
            if(statementBreaksAt?(target, blockNode))
                return StatementTarget();
            return target;
        }
    }
    return StatementTarget();
}

private trueCondition?(condBody)
    // XXX check for true condition
    = false;

private analyzeLoop(s, ast, pc, bc, condAnalysisFn, bodyAnalysisFn) {
    var whileNode = ir.While(
        nextTargetId(pc),
        ir.ASTNode(ast),
        Vector[ir.Node](),
        RTValue(),
        Vector[ir.Node](),
    );
    var loopS = loopSubContext(s, whileNode.conditionBody);
    return maybe(condAnalysisFn(loopS),
        condResult ref=> {
            whileNode.condition = singleValue(condResult);
            useRvalue(loopS, whileNode.condition);

            var subbc = BlockContext(newEnv(bc.env));
            var sublc = LoopContext(whileNode, trueCondition?(whileNode.conditionBody));

            envAddLabel(subbc.env, ast.label, whileNode);

            var bodyTarget = bodyAnalysisFn(loopSubContext(s, whileNode.body), subbc, sublc);

            addSpecializedNode(s, whileNode);
            if (sublc.infiniteLoop?)
                return StatementTarget(StatementNoReturn);
            return StatementTarget();
        },
        () ref=> {
            addSpecializedNodes(s, whileNode.conditionBody);
            return StatementTarget(StatementNoReturn);
        }
    );
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.WhileStatement) {
    return analyzeLoop(s, stmt, pc, bc,
        condS ref=> analyzeBoolSubnode(condS, bc.env, stmt.condition),
        (bodyS, subbc, sublc) ref=> analyzeStatement(bodyS, pc, subbc, sublc, stmt.body),
    );
}

private analyzeForBindings(s, env, stmt:ast.ForStatement, bindingValues:RTValues) {
    if (not arityMatches?(stmt.bodyBindings, bindingValues))
        // XXX improve error messages
        genericError("incorrect number of iterator values in for loop");
    for (arg, value in zipped(stmt.bodyBindings.items, bindingValues))
        addForBinding(s, env, stmt, arg, value);
    maybe(stmt.bodyBindings.variadicItem, varArg ref=> {
        addVariadicForBinding(s, env, stmt, varArg, sliceFrom(bindingValues, size(stmt.bodyBindings.items)));
    });
}

capturedForValue(s, stmt, formalKind, value)
    = if (value.kind == RT_VALUE_RVALUE and not inValues?(formalKind, ast.ARG_RVALUE, ast.ARG_FORWARD))
        addCapture(s, stmt, value)
    else
        value;

private addForBinding(s, env, stmt, arg, value) {
    withLocation(arg, () ref=> {
        var formalKind = referenceSpecifier(arg);
        var value2 = capturedForValue(s, stmt, formalKind, value);
        if (not referenceKindMatches?(formalKind, value2.kind))
            // XXX improve error messages
            genericError("incorrect reference kind for iterator value in for loop");
        if (not unifyArgumentType(arg, value2, env))
            // XXX improve error messages
            genericError("mismatched type for iterator value in for loop: ", value.type);
        var loweredKind = loweredArgumentKind(formalKind, value2.kind);
        var loweredValue = newReference(loweredKind, value2.type, argumentNameString(arg));
        addSpecializedBind(s, stmt, value2, loweredValue);

        maybe(argumentName(arg), name ref=> { envAdd(env, name, loweredValue); });
    });
}

private addVariadicForBinding(s, env, stmt, varArg, values) {
    withLocation(varArg, () ref=> {
        var formalKind = referenceSpecifier(varArg);
        var values2 = map(v ref=> {
            var v2 = capturedForValue(s, stmt, formalKind, v);
            if (not referenceKindMatches?(formalKind, v2.kind))
                // XXX improve error messages
                genericError("incorrect reference kinds for variadic iterator value in for loop: ");
            var loweredKind = loweredArgumentKind(formalKind, v2.kind);
            var loweredValue = newReference(loweredKind, v2.type, argumentNameString(varArg));
            addSpecializedBind(s, stmt, v2, loweredValue);
            return v2;
        }, values);
        if (not unifyVariadicArgumentType(varArg, values2, env))
            genericError("mismatched types for variadic iterator value in for loop: ",
                ValueList(mapped(v => v.type, values2))
            );

        var listVar = RTValueList(values2);
        maybe(argumentName(varArg), name ref=> { envAdd(env, name, listVar); });
    });
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.ForStatement)
    = stmtMaybe(analyzeSubnode(s, bc.env, stmt.sequenceValue), seqValues ref=> {
        var seqValue = addCapture(s, stmt, singleValue(seqValues));

        return stmtMaybe(
            withLocation(stmt.sequenceValue, () ref=>
                analyzeCallWithOneResult(s, stmt.sequenceValue, getHooks().iterator, RTValues(seqValue)),
            ),
            iterResults ref=> {
                var iterResult = singleValue(iterResults);
                var iterValue = RTValue(RT_VALUE_REF, iterResult.type, LocalVariable());
                addSpecializedBind(s, stmt, iterResult, iterValue);

                return analyzeLoop(s, stmt, pc, bc,
                    condS ref=> withLocation(stmt.sequenceValue, () ref=> withBoolResult(
                        analyzeCallWithOneResult(condS, stmt.sequenceValue, getHooks().hasNext?, RTValues(iterValue))
                    )),
                    (bodyS, subbc, sublc) ref=> stmtMaybe(
                        withLocation(stmt, () ref=> analyzeCall(bodyS, stmt, getHooks().next, RTValues(iterValue))),
                        bindingValues ref=> {
                            analyzeForBindings(bodyS, subbc.env, stmt, bindingValues);
                            return analyzeStatement(bodyS, pc, subbc, sublc, stmt.body);
                        },
                    ),
                );
            }
        );
    });

private analyzeCase(s, pc, bc, lc, testValue, stmt:ast.SwitchStatement, caseI:SizeT) {
    ref caseBlock = stmt.caseBlocks[caseI];
    return stmtMaybe(analyzeExprListNode(s, bc.env, caseBlock.values), caseValues ref=> {
        var caseArgs = RTValues(testValue);
        push(caseArgs, caseValues);
        var mCaseResult = withBoolResult(withLocation(caseBlock, () ref=>
            analyzeCallWithOneResult(s, caseBlock, getHooks().case?, caseArgs)
        ));

        var nextCase? = caseI + 1 < size(stmt.caseBlocks);
        var default? = just?(stmt.defaultBlock);

        return stmtMaybe(mCaseResult, caseResults ref=> {
            return analyzeBranch(
                s, caseBlock.body, singleValue(caseResults), nextCase? or default?,
                caseS ref=> analyzeStatement(
                    caseS,
                    pc,
                    bc,
                    lc,
                    caseBlock.body
                ),
                nextCaseS ref=> if (nextCase?)
                        analyzeCase(nextCaseS, pc, bc, lc, testValue, stmt, caseI + 1)
                    else
                        analyzeStatement(
                            nextCaseS, pc, BlockContext(newEnv(bc.env)), lc,
                            just(stmt.defaultBlock)
                        ),
            );
        });
    });
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.SwitchStatement) {
    return stmtMaybe(analyzeSubnode(s, bc.env, stmt.value), testValues ref=> {
        assert(size(stmt.caseBlocks) > 0, "switch must have at least one case block");
        return analyzeCase(s, pc, bc, lc,
            addCapture(s, stmt, singleValue(testValues)),
            stmt, SizeT(0)
        );
    });
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.TryStatement) {
    // XXX true exception support
    return analyzeStatement(s, pc, bc, lc, stmt.body);
}

overload analyzeStatement(s, pc, bc, lc, stmt:ast.ExprStatement) StatementTarget {
    try {
        return stmtMaybe(analyzeMultiExprSubnode(s, bc.env, stmt.expr), results ref=> {
            for (result in results)
                addSpecializedNode(s, ir.Consume(result));
            return StatementTarget();
        });
    } catch (e:RecursiveAnalysisError) {
        s.complete?^ = false;
        return StatementTarget();
    }
}


//
// analyzeBindings
//

private analyzeBindings(
    s:SpecializationContext,
    env:Env,
    stmt:ast.BindingStatement,
    kind:ast.BindingKind,
    bindingList
) {
    if (kind == ast.BINDING_ALIAS)
        return ...analyzeAliasBindings(s, env, *bindingList);
    else
        return ...analyzeStrictBindings(s, env, stmt, kind, *bindingList);
}

private procedure analyzeAliasBindings;

overload analyzeAliasBindings(
    s:SpecializationContext,
    env_:Env,
    bindingList:ast.SingleBindingList
) {
    var parentEnv = env_;
    var env = env_;
    for (binding in bindingList) {
        if (just?(binding.name.type))
            genericError("type declarations on alias bindings not yet supported");
        env = newEnv(parentEnv);
        envAdd(env, binding.name.name, Alias(binding.value, parentEnv));
        parentEnv = env;
    }
    return env, StatementTarget();
}

overload analyzeAliasBindings(
    s:SpecializationContext,
    parentEnv:Env,
    bindingList:ast.MultipleBindingList
) {
    var env = newEnv(parentEnv);
    envAddFlatAlias(env, parentEnv, bindingList);
    return env, StatementTarget();
}

private procedure analyzeStrictBindings;

overload analyzeStrictBindings(
    s:SpecializationContext,
    env_:Env,
    stmt:ast.BindingStatement,
    kind:ast.BindingKind,
    bindingList:ast.SingleBindingList
) {
    var env = env_;
    for (binding in bindingList) {
        env = newEnv(env);
        var target = maybeAnalyzeSingleBinding(s, env, stmt, kind, binding);
        if (statementBreaks?(target))
            return env, target;
    }
    return env, StatementTarget();
}

private maybeAnalyzeSingleBinding(s, env, stmt, kind, binding)
    = stmtMaybe(analyzeSubnode(s, env, binding.value), valueResult ref=> {
        analyzeSingleBinding(s, env, stmt, kind, binding.name, singleValue(valueResult));
        return StatementTarget();
    });

private localVariableBinding?(bindingKind, value)
    = bindingKind == ast.BINDING_VAR
      or (bindingKind == ast.BINDING_CONST and value.kind == RT_VALUE_RVALUE)
      or (inValues?(bindingKind, ast.BINDING_FORWARD, ast.BINDING_RVALUE)
          and value.kind == RT_VALUE_RVALUE
          and not referenceVariable?(value));

private analyzeBindingVar(s, stmt, kind, name, value) {
    var variableKind = bindingVariableKind(kind, value.kind);
    var variableReferent = if (localVariableBinding?(kind, value))
            RTValueReferent(LocalVariable())
        else
            RTValueReferent(ReferenceVariable());
    var result = RTValue(variableKind, value.type, variableReferent, name);
    addSpecializedBind(s, stmt, value, result);
    return result;
}

private analyzeSingleBinding(
    s,
    env,
    stmt:ast.BindingStatement,
    kind:ast.BindingKind,
    bindingName:ast.BindingName,
    value:RTValue
) {
    maybe(bindingName.type, typeExpr ref=> {
        var bindingType = evaluateExpr(typeExpr, env);
        if (bindingType != value.type)
            genericError(
                "variable declared with type ", bindingType,
                " but bound to value of type ", value.type,
            );
    });

    envAdd(env, bindingName.name, analyzeBindingVar(s, stmt, kind, bindingName.name.str, value));
}

private bindingVariableKind(bindingKind:ast.BindingKind, valueKind:RTValueKind) {
    switch (bindingKind) {
    case ast.BINDING_VAR:
        return RT_VALUE_REF;
    case ast.BINDING_REF:
        if (valueKind != RT_VALUE_REF)
            genericError("ref reference must be bound to a non-const lvalue");
        return RT_VALUE_REF;
    case ast.BINDING_RVALUE:
        if (valueKind != RT_VALUE_RVALUE)
            genericError("rvalue reference must be bound to an rvalue");
        return RT_VALUE_RVALUE;
    case ast.BINDING_CONST:
        return RT_VALUE_CONST;
    case ast.BINDING_FORWARD:
        return valueKind;
    case ast.BINDING_ALIAS:
        assert(false, "alias binding handled as strict variable");
        return RTValueKind();
    default:
        assert(false, "invalid binding kind");
        return RTValueKind();
    }
}

overload analyzeStrictBindings(
    s:SpecializationContext,
    env_:Env,
    stmt:ast.BindingStatement,
    kind:ast.BindingKind,
    bindingList:ast.MultipleBindingList
) {
    var env = newEnv(env_);
    return ...maybe(bindingList.values,
        valueExprList ref=> ...maybe(analyzeMultiExprListNode(s, env, valueExprList, true),
            values ref=> {
                if (not arityMatches?(bindingList.names, values))
                    // XXX better error message
                    genericError("incorrect number of values for variable binding");
                for (binding, value in zipped(bindingList.names.items, values))
                    analyzeSingleBinding(s, env, stmt, kind, binding, value);

                maybe(bindingList.names.variadicItem, varItem ref=> {
                    var variadicVars = map(
                        value ref=> analyzeBindingVar(s, stmt, kind, varItem.name.str, value),
                        slicedFrom(values, size(bindingList.names.items))
                    );

                    envAdd(env, varItem.name, RTValueList(variadicVars, varItem.name));
                });

                return env, StatementTarget();
            },
            () ref=> ...(env, StatementTarget(StatementNoReturn)),
        ),
        () ref=> {
            // XXX
            genericError("variable binding without initialization is not yet supported");
            return env, StatementTarget();
        },
    );
}


//
// analyzeMultiExprSubnode
//

private analyzeMultiExprSubnode(s, env, ast) Maybe[RTValues]
    = withLocation(ast, () ref=> analyzeMultiExprNode(s, env, ast));

private analyzeMultiExprNode(s, env, ast)
    = genericAnalysisError("single value cannot be used in multiple value context");

overload analyzeMultiExprNode(s, env, expr:ast.Expr) Maybe[RTValues] {
    return analyzeMultiExprSubnode(s, env, *expr);
}

private withAliasRecursionProtection(x, fn) {
    if (x.runtimeAnalyzing?)
        genericError("recursion during alias evaluation");
    x.runtimeAnalyzing? = true;
    var results = fn();
    x.runtimeAnalyzing? = false;
    return move(results);
}

private analyzeMultiEnvEntry(s, expr, envEntry) = match(envEntry,
    RTValueList, x ref=> Maybe(x.vars),
    Value, x ref=>
        genericAnalysisError("single value cannot be used in multiple value context"),
    ValueList, x ref=> addSpecializedValueList(s, expr, x),
    Alias, x ref=> withAliasRecursionProtection(x,
        () ref=> analyzeSubnode(s, x.env, x.value),
    ),
    ListAlias, x ref=> withAliasRecursionProtection(x,
        () ref=> analyzeMultiExprListNode(s, x.env, x.value, true),
    ),
    PatternCell, x ref=>
        genericAnalysisError("pattern variable cannot be used in non-pattern expression"),
    ListPatternCell, x ref=>
        genericAnalysisError("pattern variable cannot be used in non-pattern expression"),
    RTValue, x ref=>
        genericAnalysisError("single value cannot be used in multiple value context"),
    RTLabel, x ref=>
        genericAnalysisError("label cannot be used as a value"),
    RTExternal, x ref=>
        genericAnalysisError("single value cannot be used in multiple value context"),
    RTGlobal,     x ref=>
        genericAnalysisError("single value cannot be used in multiple value context"),
);

overload analyzeMultiExprNode(s, env, expr:ast.NameRef) {
    var envEntry = nameRefLookup(env, expr);
    return analyzeMultiEnvEntry(s, expr, envEntry);
}

overload analyzeMultiExprNode(s, env, expr:ast.SimpleNameRef) {
    var envEntry = privateLookup(env, expr.name);
    return analyzeMultiEnvEntry(s, expr, envEntry);
}

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.PatternNameRef)
    = addSpecializedValueList(s, expr, derefListPattern(env, expr.name));

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.Call)
    = analyzeCallNode(s, env, expr);

private analyzeCallNode(s:SpecializationContext, env:Env, expr:ast.Call)
    = ifStaticValue(s, env, expr.expr,
        callable ref=> {
            return maybe(analyzeNode(s, env, expr.args),
                inputs ref=> addSpecializedCall(s, expr, inputs, analyzeCallable(callable, inputs)),
            );
        },
        callableResult ref=> maybe(analyzeNode(s, env, expr.args), inputs ref=> {
            var operands = RTValues(callableResult);
            push(operands, inputs);
            return analyzeCall(s, expr, getHooks().call, operands);
        }),
    );

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.Indexing)
    = analyzeIndexing(s, env, expr);

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.StaticExpr) {
    var values = evaluateMultiExpr(expr.expr, env);
    return addSpecializedStaticValueList(s, expr, values);
}

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.UnaryOpExpr)
    = analyzeUnaryOp(s, env, expr);

overload analyzeMultiExprNode(s:SpecializationContext, env:Env, expr:ast.ThrowExpr)
    = analyzeThrowExprNode(s, env, expr);


//
// analyzeBoolSubnode
//

validBoolResult?(results:Maybe[RTValues])
    = maybe(results,
        r => singleValue(r).type == boolType(),
        () => true
    );

withBoolResult(x) {
    if (not validBoolResult?(x))
        // OK to assume results is not Nothing and has one element here
        genericError(boolType(), " expected but ", just(x)[0].type, " received");
    return x;
}

analyzeBoolSubnode(s, env, ast) = withLocation(ast, () ref=> {
    try {
        return withBoolResult(analyzeNode(s, env, ast));
    } catch (e:RecursiveAnalysisError) {
        s.complete?^ = false;
        return Maybe(RTValues(addRvalue(s, newRvalue(boolType()))));
    }
});


//
// analyzeNode helpers
//

singleValue(s:RTValues) {
    if (size(s) != 1)
        genericError("multiple values cannot be used in single value context");
    return s[0];
}

cloneVariable(v:RTValue, ...name) = RTValue(v.kind, v.type, v.referent, ...name);
cloneVariables(vs:RTValues, ...name) = map(v ref=> cloneVariable(v, ...name), vs);
overload cloneVariables(mvs:Maybe[RTValues])
    = maybe(mvs, vs => Maybe(cloneVariables(vs)));

analyzeSubnode(s:SpecializationContext, env:Env, ast) Maybe[RTValues]
    = withLocation(ast, () ref=> analyzeNode(s, env, ast));

genericAnalysisError(forward ...err) {
    genericError(...err);
    return nothing(RTValues);
}

newRvalue(type, ...name) = RTValue(RT_VALUE_RVALUE, type, LocalVariable(), ...name);
newImmediate(type, value, ...name) = RTValue(RT_VALUE_RVALUE, type, value, ...name);
newReference(kind, type, ...name) = RTValue(kind, type, ReferenceVariable(), ...name);

addImmediate(s, type, value, ...name) {
    var rv = RTValue(RT_VALUE_RVALUE, type, value, ...name);
    addRvalue(s, rv);
    return rv;
}

addCapture(s, stmt, value, ...name) {
    var capturedValue = RTValue(
        if (value.kind == RT_VALUE_RVALUE) RT_VALUE_CONST else value.kind,
        value.type,
        if (value.kind == RT_VALUE_RVALUE)
            RTValueReferent(LocalVariable())
        else
            RTValueReferent(ReferenceVariable()),
        ...name
    );
    addSpecializedBind(s, stmt, value, capturedValue);
    return capturedValue;
}

private procedure intValueType;
overload intValueType(v:StaticIntValue) = intType();
overload intValueType(v:StaticUIntValue) = uintType();
overload intValueType(v:UInt8)  = uint8Type();
overload intValueType(v:UInt16) = uint16Type();
overload intValueType(v:UInt32) = uint32Type();
overload intValueType(v:UInt64) = uint64Type();
overload intValueType(v:Int8)  = int8Type();
overload intValueType(v:Int16) = int16Type();
overload intValueType(v:Int32) = int32Type();
overload intValueType(v:Int64) = int64Type();

private procedure floatValueType;
overload floatValueType(v:Float32) = float32Type();
overload floatValueType(v:Float64) = float64Type();

addSpecializedNode(s:SpecializationContext, node:ir.Node) {
    for (input in ir.nodeInputs(node))
        useRvalue(s, input);
    for (output in ir.nodeOutputs(node))
        addRvalue(s, output);
    push(s.body^, node);
}

[T | VariantMember?(ir.Node, T)]
overload addSpecializedNode(s:SpecializationContext, node:T) {
    addSpecializedNode(s, ir.Node(node));
}

addSpecializedNodes(s:SpecializationContext, nodes:Vector[ir.Node]) {
    for (node in nodes)
        addSpecializedNode(s, node);
}

addSpecializedLiteralCodeBody(s:SpecializationContext, env:Env, body:ast.LiteralCodeBody) {
    addSpecializedNode(s, ir.LiteralCodeBody(body, body.kind, ir.parseLiteralCodeBody(env, body.code)));
    return Maybe(RTValues());
}

singleAddSpecializedValue(s:SpecializationContext, ast, value:Value) RTValue = match(value,
    BoolValue, x ref=> addImmediate(s, boolType(), value),
    CharValue, x ref=> addImmediate(s, charType(), value),
    IntValue, x ref=> addImmediate(s, intValueType(*x), value),
    FloatValue, x ref=> addImmediate(s, floatValueType(*x), value),
    StringValue, x ref=> addImmediate(s, stringConstantType(), value),
    TupleValue, x ref=> {
        var elements = map(e ref=> singleAddSpecializedValue(s, ast, e), x.elements);
        return maybe(analyzeCallWithOneResult(s, ast, getHooks().tupleLiteral, elements),
            v => v[0],
            () => {
                genericError("tuple conversion does not terminate");
                return RTValue();
            },
        );
    },
    MatchDefault, x ref=> addImmediate(s, staticType(Value(x)), value),
);

addSpecializedValue(s, ast, value)
    = Maybe(RTValues(singleAddSpecializedValue(s, ast, value)));

singleAddSpecializedStaticValue(s:SpecializationContext, ast, value:Value) {
    return addImmediate(s, staticType(value), value);
}

addSpecializedStaticValue(s, ast, value)
    = Maybe(RTValues(singleAddSpecializedStaticValue(s, ast, value)));

addSpecializedStaticValueList(s, ast, values:ValueList) {
    var outputs = RTValues(mapped(v ref=> addImmediate(s, staticType(v), v), values));
    return Maybe(outputs);
}

addSpecializedValueList(s:SpecializationContext, ast, valueList:ValueList) {
    var outputs = Vector(mapped(o ref=> singleAddSpecializedValue(s, ast, o), valueList));
    return Maybe(outputs);
}

addSpecializedCall(
    s:SpecializationContext,
    ast,
    inputs:RTValues,
    specialization:Specialization
) {
    var mResults = cloneVariables(specialization.results);
    var outputs = maybe(mResults,
        results ref=> Maybe(map(r ref=> ir.OutputVariable(r, not localVariable?(r)), results))
    );
    addSpecializedNode(s, ir.Call(ir.ASTNode(ast), inputs, outputs, specialization));
    return mResults;
}

addSpecializedPhi(
    s:SpecializationContext,
    branches:Vector[RTValues],
    outputs:RTValues
) {
    addSpecializedNode(s, ir.Phi(branches, outputs));
    return Maybe(outputs);
}

singleAddSpecializedBindReturn(
    s:SpecializationContext,
    ast,
    input:RTValue,
    output:RTValue
) {
    addSpecializedNode(s, ir.BindReturn(ir.ASTNode(ast), input, output));
    return output;
}

addSpecializedBind(
    s:SpecializationContext,
    ast,
    input:RTValue,
    output:RTValue
) {
    addSpecializedNode(s, ir.Bind(ir.ASTNode(ast), input, output));
    return Maybe(RTValues(output));
}

addSpecializedAddressOf(
    s:SpecializationContext,
    ast,
    input:RTValue,
    output:RTValue
) {
    addSpecializedNode(s, ir.AddressOf(ir.ASTNode(ast), input, output));
    return Maybe(RTValues(output));
}

addSpecializedNot(
    s:SpecializationContext,
    ast,
    input:RTValue,
    output:RTValue
) {
    addSpecializedNode(s, ir.Not(ir.ASTNode(ast), input, output));
    return Maybe(RTValues(output));
}

addSpecializedThrow(
    s:SpecializationContext,
    ast,
    exception:RTValue
) {
    addSpecializedNode(s, ir.Throw(ast, exception));
    return nothing(RTValues);
}

addSpecializedInitialize(
    s:SpecializationContext,
    ast,
    input:RTValue,
    output:RTValue
) {
    addSpecializedNode(s, ir.Initialize(ir.ASTNode(ast), input, output));
    return Maybe(RTValues(output));
}


//
// matchOverload
//

[Arg, S | Sequence?(S)]
arityMatches?(formalArgs:ast.VariadicList[Arg], args:S) {
    if (nothing?(formalArgs.variadicItem))
        return size(args) == size(formalArgs.items);
    else
        return size(args) >= size(formalArgs.items);
}

private referenceSpecifier(formalArg:ast.Argument) ast.ArgumentKind {
    return match(formalArg,
        ast.BoundArgument, x => maybe(x.kind, y => y, () => ast.ARG_CONST),
        ast.StaticArgument, x => ast.ARG_CONST,
    );
}

private referenceKindMatches?(formalKind:ast.ArgumentKind, kind:RTValueKind) {
    if (formalKind == ast.ARG_REF)
        return kind == RT_VALUE_REF;
    if (formalKind == ast.ARG_RVALUE)
        return kind == RT_VALUE_RVALUE;
    return true;
}

private loweredArgumentKind(formalKind:ast.ArgumentKind, kind:RTValueKind) {
    if (formalKind == ast.ARG_CONST)
        return RT_VALUE_CONST;
    return kind;
}

private unifyArgumentType(formalArg:ast.Argument, arg:RTValue, env) {
    return match(formalArg,
        ast.BoundArgument, x ref=> maybe(x.type,
            type ref=> {
                var typePattern = evaluatePattern(type, env);
                return unify(typePattern, arg.type);
            },
            () => true,
        ),
        ast.StaticArgument, x ref=> {
            if (not staticType?(arg.type))
                return false;

            var staticPattern = evaluatePattern(x.pattern, env);
            return unify(staticPattern, staticTypeValue(arg.type));
        }
    );
}

private unifyVariadicArgumentType(formalArg, args, env) {
    return match(formalArg,
        ast.BoundArgument, x ref=> maybe(x.type,
            type => {
                var listCell = evaluateListPatternCell(type, env);
                return unifyList(listCell, mapped(a => ref a.type, args));
            },
            () => true,
        ),
        ast.StaticArgument, x ref=> {
            for(arg in args)
                if (not staticType?(arg.type))
                    return false;

            var staticPattern = evaluateListPatternCell(x.pattern, env);
            var types = ValueList(mapped(arg => staticTypeValue(arg.type), args));
            return unifyList(staticPattern, types);
        },
    );
}

private argumentName(formalArg) = match(formalArg,
    ast.BoundArgument, x ref=> Maybe(x.name),
    ast.StaticArgument, x ref=> nothing(ast.Identifier),
);

private argumentNameString(formalArg) = match(formalArg,
    ast.BoundArgument, x ref=> Maybe(x.name.str),
    ast.StaticArgument, x ref=> nothing(String),
);

private unifyArgument(s:Specialization, formalArg:ast.Argument, arg:RTValue) {
    var formalKind = referenceSpecifier(formalArg);
    if (not referenceKindMatches?(formalKind, arg.kind))
        return false;
    if (not unifyArgumentType(formalArg, arg, s.env))
        return false;
    var loweredArgKind = loweredArgumentKind(formalKind, arg.kind);
    var argName = argumentName(formalArg);
    var v = RTValue(loweredArgKind, arg.type, ReferenceVariable(), maybe(argName, name ref=> Maybe(name.str)));
    maybe(argName, name ref=> { envAdd(s.env, name, v); });
    push(s.args, v);
    return true;
}

private unifyVariadicArgument(s:Specialization, formalArg:ast.Argument, args) {
    var formalKind = referenceSpecifier(formalArg);
    var vars = RTValues();
    var argName = argumentName(formalArg);
    var argNameStr = maybe(argName, name ref=> Maybe(name.str));
    for (arg in args) {
        if (not referenceKindMatches?(formalKind, arg.kind))
            return false;
        var loweredArgKind = loweredArgumentKind(formalKind, arg.kind);
        var v = RTValue(loweredArgKind, arg.type, ReferenceVariable(), argNameStr);
        push(vars, v);
        push(s.args, v);
    }
    if (not unifyVariadicArgumentType(formalArg, args, s.env))
        return false;

    var listVar = RTValueList(vars);
    maybe(argName, name ref=> { envAdd(s.env, name, listVar); });

    return true;
}

private unifyArguments(s:Specialization, formalArgs, args) {
    for (formalArg, arg in zipped(formalArgs.items, args)) {
        if (not unifyArgument(s, formalArg, arg))
            return false;
    }
    var restArgs = slicedFrom(args, size(formalArgs.items));
    return maybe(formalArgs.variadicItem,
        formalArg ref=> unifyVariadicArgument(s, formalArg, restArgs),
        () => true,
    );
}

private bindNamedSingleReturn(s:Specialization, name, returnSpec) {
    var type = evaluateExpr(returnSpec.type, s.env);
    if (just?(returnSpec.kind))
        type = pointerType(type);
    var v = RTValue(RT_VALUE_REF, type, ReferenceVariable(), name);
    push(s.internalNamedResults, v);
    envAdd(s.env, name, v);
}

private bindNamedMultiReturn(s:Specialization, name, returnSpec) {
    var types = evaluateMultiExpr(returnSpec.type, s.env);
    var ref? = just?(returnSpec.kind);

    var vars = map(
        type ref=> RTValue(RT_VALUE_REF, if (ref?) pointerType(type) else type),
        types
    );

    var v = RTValueList(vars, name);
    envAdd(s.env, name, v);

    push(s.internalNamedResults, move(vars));
}

private bindNamedReturn(s:Specialization, name, returnSpec) {
    switch (returnSpec.arityKind) {
    case ast.RETURN_SINGLE:
        bindNamedSingleReturn(s, name, returnSpec);
        break;
    case ast.RETURN_MULTI:
        bindNamedMultiReturn(s, name, returnSpec);
        break;
    default:
        assert(false);
        break;
    }
}

private bindNamedReturns(s:Specialization) {
    ref ast = s.matchedOverload.ast;
    maybe(ast.definition.returnedNames,
        names ref=> {
            for (name, returnSpec in zipped(names, ast.definition.returns))
                bindNamedReturn(s, name, returnSpec);
        },
        () => {},
    );
}

matchOverload(o:Overload, callable:Value, args:RTValues) Maybe[Specialization] {
    ref formalArgs = o.ast.definition.args;
    if (not arityMatches?(formalArgs, args))
        return nothing(Specialization);
    var pvars = topLevelItemPatternVars(o);
    var s = Specialization(o, callable);
    s.env = initializeMatch(o.module, pvars);
    var callablePattern = evaluatePattern(o.ast.target, s.env);
    if (not unify(callablePattern, callable))
        return nothing(Specialization);
    if (not unifyArguments(s, formalArgs, args))
        return nothing(Specialization);
    assert(size(s.args) == size(args));
    s.internalArgs = s.args;
    verifyPatternVars(pvars, s.env);
    if (not testPredicate(o.ast.definition.predicate, s.env))
        return nothing(Specialization);
    bindNamedReturns(s);
    return Maybe(s);
}


//
// analyzeCallable helpers
//

ifOverload(program, callable, args, thenFn, elseFn) {
    var maybeHead = valueSymbolHead(callable);
    if (just?(maybeHead)) {
        ref overloads = if (program.overloadsDistributed?)
                just(maybeHead).overloads
            else
                program.symbolOverloads;

        for (x in reversed(overloads)) {
            var result = matchOverload(x, callable, args);
            if (just?(result))
                return forward ...thenFn(move(just(result)));
        }
    }

    for (x in reversed(program.patternOverloads)) {
        var result = matchOverload(x, callable, args);
        if (just?(result))
            return forward ...thenFn(move(just(result)));
    }
    return forward ...elseFn();
}

private findOverload(program, callable, args)
    = ifOverload(program, callable, args, s => s, () ref=> {
        genericError("no matching runtime overload");
        return Specialization();
    });

private returnSpecKind(returnSpec: ast.ReturnSpec) {
    return ...maybe(returnSpec.kind,
        k => {
            switch (k) {
            case ast.RETURN_CONST: return RT_VALUE_CONST, RTValueReferent(ReferenceVariable());
            case ast.RETURN_REF: return RT_VALUE_REF, RTValueReferent(ReferenceVariable());
            case ast.RETURN_RVALUE: return RT_VALUE_RVALUE, RTValueReferent(ReferenceVariable());
            default :
                assert(false);
                return RTValueKind(), RTValueReferent(ReferenceVariable());
            }
        },
        () => ...(RT_VALUE_RVALUE, RTValueReferent(LocalVariable())),
    );
}

private computeReturnSpec(returns:Vector[ast.ReturnSpec], env) {
    // XXX handle noreturn syntax here
    var results = RTValues();
    for (returnSpec in returns) {
        if (returnSpec.arityKind == ast.RETURN_SINGLE) {
            var kind, referent = ...returnSpecKind(returnSpec);
            var type = evaluateExpr(returnSpec.type, env);
            push(results, RTValue(kind, type, referent));
        }
        else {
            assert(returnSpec.arityKind == ast.RETURN_MULTI);
            var kind, referent = ...returnSpecKind(returnSpec);
            var types = evaluateMultiExpr(returnSpec.type, env);
            for (type in types)
                push(results, RTValue(kind, type, referent));
        }
    }
    return Maybe(move(results));
}

private analyzeCallableReturns(s:Specialization, env, o:Overload) {
    s.body = Maybe(Vector[ir.Node]());
    try {
        return withLocation(o.ast.definition, () ref=> {
            var declaredReturns? = not empty?(o.ast.definition.returns);
            var namedReturns? = just?(o.ast.definition.returnedNames);

            var complete? = true;
            var context = SpecializationContext(&just(s.body), &complete?);
            for (arg in s.internalArgs)
                addRvalue(context, arg);

            var analyzedResults = match(o.ast.definition.body,
                ast.ExprCodeBody, body ref=> analyzeNode(context, env, body.exprs),
                ast.LiteralCodeBody, body ref=> {
                    if (declaredReturns? and not namedReturns?)
                        genericError("literal procedure must use named return values");
                    return analyzeLiteralCodeBody(context, env, body);
                },
                ast.Block, body ref=> analyzeBlockCodeBody(context, env, body),
                ast.UndefinedCodeBody,
                    body ref=> genericAnalysisError("undefined overload"),
            );

            if (not complete?)
                s.body = nothing(Vector[ir.Node]);

            if (declaredReturns?) {
                // if returns are named, the body should return void
                var expectedResults =
                    if (namedReturns?)
                        Maybe(RTValues())
                    else
                        computeReturnSpec(o.ast.definition.returns, env);
                // declared returns,  actually returns  => return types must match
                // declared returns,  actually noreturn => ok
                // declared noreturn, actually returns  => error
                maybe(analyzedResults, ar ref=> {
                    maybe(expectedResults,
                        er ref=> {
                            if (not equalResults?(ar, er))
                                genericError("procedure declared with different return types from what the body returns");
                        },
                        () ref=> {
                            genericError("procedure declared as noreturn but the body returns");
                        },
                    );
                });
            }
            s.results = if (namedReturns?)
                computeReturnSpec(o.ast.definition.returns, env)
            else
                analyzedResults;
            return complete?;
        });
    } catch (ex:RecursiveAnalysisError) {
        s.body = nothing(Vector[ir.Node]);
        if (not empty?(o.ast.definition.returns)) {
            s.results = computeReturnSpec(o.ast.definition.returns, env);
            return false;
        } else
            throw ex;
    } catch (ex) {
        s.body = nothing(Vector[ir.Node]);
        throw ex; 
    }
}

overload analyzeCallableReturns(s) = analyzeCallableReturns(s, s.env, s.matchedOverload);

analyzeCallableBody(s)
    = withCallAnalysis(s.callable, s.args, () ref=> analyzeCallableReturns(s));

private entrySpecialization(entry:InvokeEntry) {
    return maybe(entry.specialization,
        x => x,
        () => {
            recursiveAnalysisError();
            return Specialization();
        },
    );
}

private callableInvokeTable(callable:Value) {
    return ref match(callable,
        Symbol, x => ref x.invokeTable,
        SymbolHead, x => ref x.invokeTable,
        Primitive, x => {
            genericError("static primitive called in runtime context without # operator: ", x);
            return ref typeToLValue(InvokeTable);
        },
        AliasPrimitive, x => {
            genericError("static primitive called in runtime context without # operator: ", x);
            return ref typeToLValue(InvokeTable);
        },
        MatchDefault, x => {
            genericError("invalid runtime callable: ", x);
            return ref typeToLValue(InvokeTable);
        },
    );
}


//
// analyzeCallable
//

analyzeCallable(callable:Value, args:RTValues) Specialization
    = withCallAnalysis(callable, args, () ref=> analyzeCallable2(callable, args));

analyzeCallable2(callable:Value, args:RTValues) Specialization {
    ref invokeTable = callableInvokeTable(callable);
    var entryPtr = lookup(invokeTable, ArgumentList(args));
    if (not null?(entryPtr))
        return entrySpecialization(entryPtr^);
    var lowered? = false;
    var loweredArgs = Vector[RTValue]();
    invokeTable[ArgumentList(args)] = InvokeEntry(nothing(Specialization));
    try {
        var specialization = findOverload(getProgram(), callable, args);
        loweredArgs = specialization.args;
        if (not equalArguments?(loweredArgs, args)) {
            var entryPtr = lookup(invokeTable, ArgumentList(loweredArgs));
            if (not null?(entryPtr)) {
                var s = entrySpecialization(entryPtr^);
                invokeTable[ArgumentList(args)].specialization = Maybe(s);
                return s;
            }
            invokeTable[ArgumentList(loweredArgs)] = InvokeEntry(nothing(Specialization));
            lowered? = true;
        }
        alias s = specialization;
        analyzeCallableReturns(s);
        invokeTable[ArgumentList(args)].specialization = Maybe(specialization);
        if (lowered?)
            invokeTable[ArgumentList(loweredArgs)].specialization = Maybe(specialization);
        return specialization;
    }
    catch (e) {
        remove(invokeTable, ArgumentList(args));
        if (lowered?) {
            remove(invokeTable, ArgumentList(loweredArgs));
        }
        throw e;
    }
}


//
// analyzeGlobalConstructor
//

analyzeGlobalConstructor() Maybe[Specialization] {
    ref globalMap = getProgram().globalMap;
    var specialization = Specialization(
        Value(StringValue(String("global constructor")))
    );
    specialization.env = newEnv(getProgramMainModule());
    specialization.body = Maybe(Vector[ir.Node]());
    ref body = just(specialization.body);
    for (g in reversed(globalMap.globalOrder)) {
        assert(not null?(lookup(globalMap.constructors, g)), "missing constructor in global map!");
        push(body, globalMap.constructors[g]);
    }

    if (empty?(body))
        return nothing(Specialization);
    else
        return Maybe(specialization);
}
