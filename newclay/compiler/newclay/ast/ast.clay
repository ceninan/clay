
import maybe.*;
import newclay.lexer.*;
import remote.marshaling.*;
import newclay.diagnostics.(computeLocation);



//
// ModuleName
//

record ModuleName(path: Vector[String]);


//
// TokenRange
//

alias TokenRange = Range[SizeT];



//
// AST nodes
//

record Location (
    tokens: SourceTokens,
    tokenRange: TokenRange,
    mainToken: SizeT,
);

private ast(...fields) = referenceTypeWithPredicate(
    ASTNode?,
    location: Location,
    ...fields,
);

procedure ASTNode?;
overload ASTNode?(x) = false;

[T, ...A | ASTNode?(T)
           and (Tuple[...ReferenceTypeFieldTypes(T)] ==
                Tuple[Location, ...A])]
callbyname overload T(...args:A) {
    alias tokenRange = TokenRange(SizeT(0), SizeT(0));
    return T(Location(SourceTokens(), tokenRange, SizeT(0)), ...args);
}

[T | ASTNode?(T)]
astFields(x:T) = forward ...dropValues(static 1, ...referenceTypeFields(x));

[T | ASTNode?(T)]
overload printReprTo(stream, x:T) {
    printTo(stream, T);
    printReprValuesTo(stream, ...astFields(x));
}

[T | ASTNode?(T)]
overload marshaledSize(context:MarshalContext, x:T) MarshalSize
    = foldValues(add,
        ...mapValues(f ref=> marshaledSize(context, f), ...astFields(x)),
    );

[T | ASTNode?(T)]
overload marshalTo(context:MarshalContext, buffer_:Pointer[Byte], x:T) buffer:Pointer[Byte] {
    buffer <-- buffer_;
    marshalMemberwise(context, buffer,
        ...astFields(x),
    );
}

[T | ASTNode?(T)]
overload unmarshalFrom(context:UnmarshalContext, begin_:Pointer[Byte], end:Pointer[Byte], static T)
    returned:T, begin:Pointer[Byte]
{
    begin <-- begin_;
    // XXX should get tokens pointer from SourceAST context if available
    returned <-- allocateUninitializedRefUnsafe(T);
    returned.location <-- Location();
    unmarshalMemberwise(context, begin, end,
        ...astFields(returned),
    );
}



//
// getLocation, setLocation, assignLocation
//

procedure getLocation;
overload getLocation(x) = x.location;
overload getLocation(x:Expr) = getLocation(*x);
overload getLocation(x:Statement) = getLocation(*x);
overload getLocation(x:ExprListItem) = getLocation(*x);
overload getLocation(x:Pattern) = getLocation(*x);
overload getLocation(x:CodeBody) = getLocation(*x);
overload getLocation(x:Argument) = getLocation(*x);
overload getLocation(x:Location) = x;

procedure setLocation;
overload setLocation(x, forward location) {
    x.location = location;
}
overload setLocation(x:Expr, forward location) {
    setLocation(*x, location);
}
overload setLocation(x:ExprListItem, forward location) {
    setLocation(*x, location);
}
overload setLocation(x:Pattern, forward location) {
    setLocation(*x, location);
}

assignLocation(destNode, srcNode) {
    setLocation(destNode, getLocation(srcNode));
}



//
// getFileLocation
//

getFileLocation(x) = ...getFileLocation2(getLocation(x));

private getFileLocation2(location) {
    if (null?(location.tokens))
        return String("(unknown)"), 1, 0;

    ref path = location.tokens.file.path;
    var data = location.tokens.file.data;
    var tokenOffset = location.tokenRange.begin;
    var offset = location.tokens.vector[tokenOffset].range.begin;
    var line, column, tabs = ...computeLocation(data, offset);

    return path, line+1, column + 7*tabs;
}



//
// VariadicList
//

record VariadicList[T] (
    items: Vector[T],
    variadicItem: Maybe[T],
);



//
// Identifier
//

record Identifier = ast(
    str: String,
);

[S | String?(S) and (S != String)]
overload Identifier(x:S) = Identifier(String(x));



//
// ExprList
//

alias ExprList = Vector[ExprListItem];

variant ExprListItem = UnpackExpr
                     | Expr
                     ;

record UnpackExpr = ast(
    expr: Expr,
);



//
// Expr
//

variant Expr = BoolLiteral
             | CharLiteral
             | IntLiteral
             | FloatLiteral
             | StringLiteral
             | NameRef
             | SimpleNameRef
             | PatternNameRef
             | TupleExpr
             | ArrayExpr
             | Call
             | Indexing
             | StaticIndexing
             | FieldRef
             | AndExpr
             | OrExpr
             | NotExpr
             | LambdaExpr
             | IfExpr
             | ThrowExpr
             | UnaryOpExpr
             | BinaryOpExpr
             | StaticExpr
             | PairExpr
             ;

overload Expr() = Expr(BoolLiteral());

record BoolLiteral = ast(
    value: Bool,
);

record CharLiteral = ast(
    value: String,
);

record IntLiteral = ast(
    negative?: Bool,
    value: String,
);

record FloatLiteral = ast(
    negative?: Bool,
    value: String,
);

record StringLiteral = ast(
    value: String,
);

record UnresolvedEnvRef ();
record LocalEnvRef ();
record ModuleEnvRef (module: ModuleName, name: String);
record ModulePathRef (path: Vector[Identifier]);
record ModuleAliasRef (module: ModuleName);

variant EnvRef = UnresolvedEnvRef
               | LocalEnvRef
               | ModuleEnvRef
               | ModulePathRef
               | ModuleAliasRef;
overload EnvRef() = EnvRef(UnresolvedEnvRef());

record NameRef = ast(
    env: EnvRef,
    name: Vector[Identifier],
);
overload NameRef(name:Vector[Identifier]) = NameRef(EnvRef(), name);
overload NameRef(name:Identifier) = NameRef(EnvRef(), Vector[Identifier](name));
[S | String?(S)]
overload NameRef(name:S) = NameRef(Identifier(String(name)));

record SimpleNameRef = ast(
    env: EnvRef,
    name: Identifier,
);

overload SimpleNameRef(name:Identifier) = SimpleNameRef(EnvRef(), name);
[S | String?(S)]
overload SimpleNameRef(name:S) = SimpleNameRef(EnvRef(), Identifier(String(name)));

record PatternNameRef = ast(
    name: Identifier,
);

record TupleExpr = ast(
    args: ExprList,
);

record ArrayExpr = ast(
    args: ExprList,
);

record Call = ast(
    expr: Expr,
    args: ExprList,
);

record Indexing = ast(
    expr: Expr,
    args: ExprList,
);

record StaticIndexing = ast(
    expr: Expr,
    index: IntLiteral,
);

record FieldRef = ast(
    expr: Expr,
    field: Identifier,
);

record AndExpr = ast(
    expr1: Expr,
    expr2: Expr,
);

record OrExpr = ast(
    expr1: Expr,
    expr2: Expr,
);

record NotExpr = ast(
    expr: Expr,
);

enum OperatorKind {
    OP_PLUS,
    OP_MINUS,
    OP_UNPACK,
    OP_ADDRESS_OF,
    OP_DEREFERENCE,
    OP_MULTIPLY,
    OP_DIVIDE,
    OP_QUOTIENT,
    OP_REMAINDER,
    OP_ADD,
    OP_SUBTRACT,
    OP_LESSER?,
    OP_LESSER_EQUALS?,
    OP_GREATER?,
    OP_GREATER_EQUALS?,
    OP_EQUALS?,
    OP_NOT_EQUALS?,
}

record StaticExpr = ast(
    expr: Expr,
);

record UnaryOpExpr = ast(
    operator: OperatorKind,
    expr: Expr,
);

record BinaryOpExpr = ast(
    operator: OperatorKind,
    expr1: Expr,
    expr2: Expr,
);

enum LambdaCaptureKind {
    LAMBDA_CAPTURE_BY_VALUE,
    LAMBDA_CAPTURE_BY_REFERENCE,
}

variant LambdaCodeBody = ExprList
                       | Block
                       ;

record LambdaExpr = ast(
    captureKind: LambdaCaptureKind,
    predicate: Maybe[Expr],
    args: ArgumentList,
    body: LambdaCodeBody,
);

record IfExpr = ast(
    condition: Expr,
    thenPart: Expr,
    elsePart: Expr,
);

record ThrowExpr = ast(
    value: Expr,
);

record PairExpr = ast(
    name: Identifier,
    expr: Expr,
);


//
// ListPattern
//

alias ListPattern = VariadicList[Pattern];

variant Pattern = BoolLiteral
                | CharLiteral
                | IntLiteral
                | StringLiteral
                | NameRef
                | PatternNameRef
                | IndexingPattern
                | TuplePattern
                ;

overload Pattern() = Pattern(BoolLiteral());

record IndexingPattern = ast(
    base: Expr,
    args: ListPattern,
);

record TuplePattern = ast(
    elements: ListPattern,
);



//
// TopLevelItem
//

variant TopLevelItem = Symbol
                     | Attribute
                     | StaticOverload
                     | Overload
                     | Import
                     | Procedure
                     | StaticFunction
                     | ExternalProcedure
                     | GlobalLiteralCodeBody
                     | GlobalBinding
                     ;

enum VisibilityKind {
    VIS_PUBLIC,
    VIS_PRIVATE,
}

record SymbolName = ast(
    name: Identifier,
    params: VariadicList[Identifier],
);

record Symbol = ast(
    visibility: VisibilityKind,
    name: SymbolName,
    expr: Maybe[ExprList],
);

record Attribute = ast(
    target: Pattern,
    predicate: Maybe[Expr],
    body: Expr,
);

record StaticOverloadDefinition = ast(
    args: ListPattern,
    predicate: Maybe[Expr],
    body: ExprList,
);

record StaticOverload = ast(
    target: Pattern,
    definition: StaticOverloadDefinition,
);

record OverloadAttributes = ast(
    inline?: Bool,
);

record OverloadDefinition = ast(
    attributes: OverloadAttributes,
    args: ArgumentList,
    returns: Vector[ReturnSpec],
    returnedNames: Maybe[Vector[Identifier]],
    predicate: Maybe[Expr],
    body: CodeBody,
);

record Overload = ast(
    target: Pattern,
    definition: OverloadDefinition,
);

record StaticFunction = ast(
    visibility: VisibilityKind,
    name: SymbolName,
    definition: StaticOverloadDefinition,
);

record Procedure = ast(
    visibility: VisibilityKind,
    name: SymbolName,
    definition: OverloadDefinition,
);

record ExternalProcedure = ast(
    visibility: VisibilityKind,
    attributes: Maybe[ExprList],
    name: Identifier,
    arguments: ExternalArgumentList,
    returns: Maybe[Expr],
    body: CodeBody,
);

record ExternalArgument = ast(
    name: Identifier,
    type: Expr,
);

record ExternalArgumentList = ast(
    items: Vector[ExternalArgument],
    variadic?: Bool,
);

record SingleGlobalBinding = ast(
    name: SymbolName,
    type: Maybe[Expr],
    value: Maybe[Expr],
);

record GlobalBinding = ast(
    visibility: VisibilityKind,
    kind: BindingKind,
    bindings: Vector[SingleGlobalBinding],
);

record GlobalLiteralCodeBody = ast(
    codeBody: LiteralCodeBody,
);

record Import = ast(
    visibility: VisibilityKind,
    name: Vector[Identifier],
    spec: ImportSpec,
);

variant ImportSpec = GeneralImportSpec
                   | SpecificImportSpecs
                   | QualifiedImportSpec
                   | AliasedImportSpec
                   ;
alias SpecificImportSpecs = Vector[SpecificImportSpec];

record GeneralImportSpec = ast();
record SpecificImportSpec = ast(
    visibility: VisibilityKind,
    name: Identifier,
    asName: Maybe[Identifier],
);
record QualifiedImportSpec = ast();
record AliasedImportSpec = ast(
    asName: Identifier,
);

enum ArgumentKind {
    ARG_CONST,
    ARG_REF,
    ARG_RVALUE,
    ARG_FORWARD,
    ARG_ALIAS,
}

variant Argument = BoundArgument
                 | StaticArgument;

record BoundArgument = ast(
    kind: Maybe[ArgumentKind],
    name: Identifier,
    type: Maybe[Pattern],
);

record StaticArgument = ast(
    pattern: Pattern,
);

alias ArgumentList = VariadicList[Argument];

enum ReturnKind {
    RETURN_CONST,
    RETURN_REF,
    RETURN_RVALUE,
}

enum ReturnArityKind {
    RETURN_SINGLE,
    RETURN_MULTI,
}

record ReturnSpec = ast(
    kind: Maybe[ReturnKind],
    arityKind: ReturnArityKind,
    type: Expr,
);

variant CodeBody = UndefinedCodeBody
                 | ExprCodeBody
                 | Block
                 | LiteralCodeBody
                 | UndefinedCodeBody
                 ;

record UndefinedCodeBody = ast();

record ExprCodeBody = ast(
    exprs: ReturnExprList,
);

alias ReturnExprList = Vector[ReturnExprListItem];

record ReturnExprListItem = ast(
    kind: Maybe[ReturnExprKind],
    item: ExprListItem,
);

enum ReturnExprKind {
    RETURN_EXPR_CONST,
    RETURN_EXPR_REF,
    RETURN_EXPR_RVALUE,
    RETURN_EXPR_FORWARD,
}

enum LiteralCodeBodyKind {
    LITERAL_C,
    LITERAL_LLVM,
    LITERAL_ASM,
}

record LiteralCodeBody = ast(
    kind: LiteralCodeBodyKind,
    code: String,
);


//
// statements
//

record Block = ast(
    label: Maybe[LabelDef],
    statements: Vector[Statement],
);

variant Statement = Block
                  | BindingStatement
                  | AssignmentStatement
                  | ReturnStatement
                  | BreakStatement
                  | ContinueStatement
                  | IfStatement
                  | ForStatement
                  | StaticForStatement
                  | WhileStatement
                  | SwitchStatement
                  | TryStatement
                  | ExprStatement
                  ;

record LabelDef = ast(
    name: Identifier
);

enum BindingKind {
    BINDING_VAR,
    BINDING_CONST,
    BINDING_REF,
    BINDING_RVALUE,
    BINDING_FORWARD,
    BINDING_ALIAS,
}

record BindingStatement = ast(
    kind: BindingKind,
    bindings: BindingList,
);

variant BindingList = SingleBindingList
                    | MultipleBindingList
                    ;

record BindingName = ast(
    name: Identifier,
    type: Maybe[Expr],
);

record SingleBinding = ast(
    name: BindingName,
    value: Expr,
);

alias SingleBindingList = Vector[SingleBinding];

record MultipleBindingList = ast(
    names: VariadicList[BindingName],
    values: Maybe[ExprList],
);

enum AssignmentKind {
    ASSIGNMENT_ASSIGN,
    ASSIGNMENT_ADD,
    ASSIGNMENT_SUBTRACT,
    ASSIGNMENT_MULTIPLY,
    ASSIGNMENT_DIVIDE,
    ASSIGNMENT_QUOTIENT,
    ASSIGNMENT_REMAINDER,
    ASSIGNMENT_INITIALIZE,
}

record AssignmentStatement = ast(
    kind: AssignmentKind,
    to: ExprList,
    from: ExprList,
);

record ReturnStatement = ast(
    values: ReturnExprList,
);

record BreakStatement = ast(
    label: Maybe[Identifier],
);
record ContinueStatement = ast(
    label: Maybe[Identifier],
);

record IfStatement = ast(
    condition: Expr,
    thenBody: Block,
    elseBody: Maybe[Block],
);

record ForStatement = ast(
    label: Maybe[LabelDef],
    bodyBindings: ArgumentList,
    sequenceValue: Expr,
    body: Block,
);

record StaticForStatement = ast(
    label: Maybe[LabelDef],
    bodyBinding: Identifier,
    values: ExprList,
    body: Block,
);

record WhileStatement = ast(
    label: Maybe[LabelDef],
    condition: Expr,
    body: Block,
);

record SwitchStatement = ast(
    value: Expr,
    caseBlocks: Vector[CaseBlock],
    defaultBlock: Maybe[Block],
);

record CaseBlock = ast(
    values: ExprList,
    body: Block,
);

record TryStatement = ast(
    body: Block,
    catchBlocks: Vector[CatchBlock],
);

record CatchBlock = ast(
    binding: BindingName,
    body: Block,
);

record ExprStatement = ast(
    expr: Expr,
);


//
// SourceAST
//

record SourceAST = referenceType(
    tokens: SourceTokens,
    topLevelItems: Vector[TopLevelItem],
);
