import newclay.common.*;
import newclay.lexer.(SourceTokens);
import newclay.ast as ast;
import newclay.ir as ir;
import newclay.diagnostics.*;
import newclay.platforms.*;
import newclay.hooks.*;

import maybe.*;
import numbers.floats.*;



//
// Program
//

alias ModuleName = ast.ModuleName;
alias ModuleMap = HashMap[ModuleName, Module];

[...S | countValues(...S) >= 1 and allValues?(String?, ...S)]
overload ModuleName(...components: S)
    = ModuleName(Vector[String](...mapValues(String, ...components)));

overload ModuleName(astName: Vector[ast.Identifier])
    = ModuleName(map(x => x.str, astName));

record GlobalLiteralCode(kind:ast.LiteralCodeBodyKind, code:ir.LiteralCode);

record Program = referenceType(
    targetInfo: TargetInfo,
    modules: ModuleMap,
    moduleSearchPath: Vector[String],
    allSymbolHeads: Vector[SymbolHead],
    allAttributes: Vector[Attribute],
    allStaticOverloads: Vector[StaticOverload],
    allOverloads: Vector[Overload],
    allLiteralCodeBodies: Vector[GlobalLiteralCode],
    globalMap: ProgramGlobalMap,
    hooks: ClayHooks,
);

record ProgramGlobalMap (
    constructors: HashMap[RTGlobal, Vector[ir.Node]],
    globalOrder: Vector[RTGlobal],
);

var mainModuleName = ModuleName("__main__");
var primitivesModuleName = ModuleName("__primitives__");
var preludeModuleName = ModuleName("prelude");

moduleNameString(name:ModuleName) = join('.', name.path);
overload printTo(stream, name:ModuleName) { printTo(stream, moduleNameString(name)); }
mainModule(program:Program) = ref program.modules[mainModuleName];
primitivesModule(program:Program) = ref program.modules[primitivesModuleName];
preludeModule(program:Program) = ref program.modules[preludeModuleName];

record ClayHooks (
    Type?: Value,
    PODType?: Value,

    ToLowLevelType: Value,
    LLSigned: Value,
    LLUnsigned: Value,
    LLBoolType: Value,
    LLIntegerType: Value,
    LLFloatType: Value,
    LLPointerType: Value,
    LLCodePointerType: Value,
    LLArrayType: Value,
    LLTupleType: Value,
    LLUnionType: Value,

    Bool: Value,
    Char: Value,
    Int: Value,
    Int8: Value,
    Int16: Value,
    Int32: Value,
    Int64: Value,
    UInt: Value,
    UInt8: Value,
    UInt16: Value,
    UInt32: Value,
    UInt64: Value,
    Float32: Value,
    Float64: Value,
    Static: Value,
    Pointer: Value,
    ExternalCodePointer: Value,
    StringConstant: Value,

    Ref: Value,
    Const: Value,
    Rvalue: Value,

    CdeclABI: Value,
    StdcallABI: Value,
    ABI?: Value,
    ABISupportsVariadics?: Value,

    plus: Value,
    minus: Value,
    call: Value,
    index: Value,
    staticIndex: Value,
    fieldRef: Value,
    dereference: Value,
    multiply: Value,
    divide: Value,
    remainder: Value,
    add: Value,
    subtract: Value,
    lesser?: Value,
    lesserEquals?: Value,
    greater?: Value,
    greaterEquals?: Value,
    equals?: Value,
    notEquals?: Value,

    case?: Value,

    iterator: Value,
    hasNext?: Value,
    next: Value,

    tupleLiteral: Value,
    arrayLiteral: Value,

    assign: Value,
    addAssign: Value,
    subtractAssign: Value,
    multiplyAssign: Value,
    divideAssign: Value,
    remainderAssign: Value,

    initializeFromUnsafe: Value,
    destroyUnsafe: Value,

    callMain: Value,
);



//
// Module
//

record Module = referenceType(
    program: Program,
    name: ModuleName,
    originalAST: ast.SourceAST,
    ast: ast.SourceAST,
    publicEnv: Env,
    privateEnv: Env,
);

overload Module(program:Program, name:ModuleName) =
    Module(program, name, ast.SourceAST(), ast.SourceAST(), Env(), Env());

overload printTo(stream, mod:Module) {
    printTo(stream, "module ", moduleNameString(mod.name));
}

overload printReprTo(stream, mod:Module) {
    printTo(stream, "#<module ", moduleNameString(mod.name), ">");
}


//
// top-level item entries
//

alias EvalTable = HashMap[ValueList, ValueList];

record GlobalBinding (kind:ast.BindingKind, ast:ast.SingleGlobalBinding);

variant SymbolHeadAST = ast.Symbol
                      | GlobalBinding;

record SymbolHead = referenceType(
    ast: SymbolHeadAST,
    astName: ast.SymbolName,
    module: Module,
    instances: HashMap[ValueList, EnvEntry],
    evalTable: EvalTable,
    invokeTable: InvokeTable,
);

overload SymbolHead(a:SymbolHeadAST, name:ast.SymbolName, module:Module) =
    SymbolHead(
        a, name, module, HashMap[ValueList, EnvEntry](),
        EvalTable(), InvokeTable(),
    );

symbolHeadHasParams?(x:SymbolHead) {
    return symbolNameHasParams?(x.astName);
}

symbolNameHasParams?(name:ast.SymbolName) {
    ref p = name.params;
    return not (empty?(p.items) and nothing?(p.variadicItem));
}

record Symbol = referenceType(
    head: SymbolHead,
    params: ValueList,
    env: Env,
    body: TriState[Value],
    attributes: TriState[Value],
    type?: TriState[Bool],
    evalTable: EvalTable,
    invokeTable: InvokeTable,
);

overload Symbol(head:SymbolHead, params:ValueList, env:Env)
    = Symbol(
        head, params, env,
        TriState[Value](), TriState[Value](),
        TriState[Bool](),
        EvalTable(),
        InvokeTable(),
    );

record PatternVars = referenceType(
    vars: Vector[ast.Identifier],
    variadicVars: Vector[ast.Identifier],
);

record Attribute = referenceType(
    ast: ast.Attribute,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload Attribute(x:ast.Attribute, module:Module) =
    Attribute(x, module, nothing(PatternVars));

record StaticOverload = referenceType(
    ast: ast.StaticOverload,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload StaticOverload(x:ast.StaticOverload, module:Module) =
    StaticOverload(x, module, nothing(PatternVars));

record Overload = referenceType(
    ast: ast.Overload,
    module: Module,
    patternVars: Maybe[PatternVars],
);

overload Overload(x:ast.Overload, module:Module) =
    Overload(x, module, nothing(PatternVars));


//
// primitives
//

enum PrimitiveKind {
    PRIM_StaticInt?,
    PRIM_StaticPlus,
    PRIM_StaticMinus,
    PRIM_StaticAdd,
    PRIM_StaticSubtract,
    PRIM_StaticMultiply,
    PRIM_StaticDivide,
    PRIM_StaticRemainder,
    PRIM_StaticIntegers,

    PRIM_StaticBool?,
    PRIM_StaticEquals?,
    PRIM_StaticNotEquals?,
    PRIM_StaticLesser?,
    PRIM_StaticLesserEquals?,
    PRIM_StaticGreater?,
    PRIM_StaticGreaterEquals?,

    PRIM_StaticString?,
    PRIM_StaticStringSize,
    PRIM_StaticStringSlice,
    PRIM_StaticStringConcat,
    PRIM_StaticStringChar,
    PRIM_StaticStringChars,
    PRIM_StaticStringFromChars,

    PRIM_StaticTuple?,
    PRIM_StaticTuple,
    PRIM_StaticTupleSize,
    PRIM_StaticTupleElement,
    PRIM_StaticTupleElements,

    PRIM_StaticSymbol?,
    PRIM_StaticSymbolBody,
    PRIM_StaticSymbolAttributes,

    PRIM_StaticModule?,
    PRIM_StaticModule,
    PRIM_StaticModuleMember,
    PRIM_StaticModuleMember?,

    PRIM_StaticError,
    PRIM_StaticAssert,

    PRIM_StaticName,
    PRIM_StaticQualifiedName,

    PRIM_CallDefinedForSymbol?,
    PRIM_StaticCallDefined?,

    PRIM_PlatformCPUName,
    PRIM_PlatformCPUFamilyName,
    PRIM_PlatformCPUPointerBits,
    PRIM_PlatformName,
    PRIM_PlatformFamilyName,
    PRIM_PlatformCodegen,
    PRIM_PlatformCodegenDialect,
}

record Primitive = referenceType(
    kind: PrimitiveKind,
);

primitiveName(kind:PrimitiveKind) {
    var s = printString(kind);
    assert(beginsWith?(s, "PRIM_"));
    return sliceFrom(s, size("PRIM_"));
}
overload primitiveName(p:Primitive) = primitiveName(p.kind);


//
// alias primitives
//

enum AliasPrimitiveKind {
    APRIM_Returns?,
    APRIM_RefType,
    APRIM_Type,
    APRIM_ExpressionString,
    APRIM_ExpressionLocation,
}

record AliasPrimitive = referenceType(
    kind: AliasPrimitiveKind,
);

overload primitiveName(kind:AliasPrimitiveKind) {
    var s = printString(kind);
    assert(beginsWith?(s, "APRIM_"));
    return sliceFrom(s, size("APRIM_"));
}
overload primitiveName(p:AliasPrimitive) = primitiveName(p.kind);


//
// environment
//

variant EnvEntry = Value
                 | ValueList
                 | PatternCell
                 | ListPatternCell
                 | Alias
                 | ListAlias
                 | RTExternal
                 | RTGlobal
                 | RTValue
                 | RTValueList
                 | RTLabel
                 ;

overload EnvEntry() = EnvEntry(Value());

variant EnvParent = EnvRoot | Env | Module;

record AmbiguousEntry (modules: Vector[Tuple[Module, EnvEntry]]);

variant EnvRootEntry = EnvEntry | AmbiguousEntry;
overload EnvRootEntry() = EnvRootEntry(AmbiguousEntry());

record EnvImport(visibility: ast.VisibilityKind, module: Module, name: String);
overload printTo(stream, imp:EnvImport) {
    if (imp.visibility == ast.VIS_PRIVATE)
        printTo(stream, "private definition ");
    printTo(stream, imp.name, " from module ", imp.module.name);
}

variant SpecificImport = EnvImport
                       | ModuleValue;
overload SpecificImport() = SpecificImport(EnvImport());

overload EnvRootEntry(imp: EnvImport) {
    switch (imp.visibility) {
    case ast.VIS_PRIVATE:
        return EnvRootEntry(privateLookup(imp.module, imp.name));
    case ast.VIS_PUBLIC:
        return EnvRootEntry(publicLookup(imp.module, imp.name));
    default:
        genericError("invalid visibility");
        return EnvRootEntry();
    }
}

overload EnvRootEntry(mv: ModuleValue) = EnvRootEntry(EnvEntry(Value(mv)));

record EnvRoot = referenceType(
    generalImports: HashMap[ModuleName, Module],
    specificImports: HashMap[String, SpecificImport],
    entries: Maybe[HashMap[String, EnvRootEntry]],
);

private resolveGeneralEnvRootEntry(entries, entryName, entryList) {
    switch (size(entryList)) {
    case 0:
        return;
    case 1:
        entries[entryName] = EnvRootEntry(entryList[0].1);
        return;
    default:
        entries[entryName] = EnvRootEntry(AmbiguousEntry(entryList));
        return;
    }
}

private resolveGeneralEnvRootEntries(entries, generalImports) {
    var generalEntries = HashMap[String, Vector[Tuple[Module, EnvEntry]]]();

    for (name, module in items(generalImports)) {
        for (entryName, entry in items(module.publicEnv.entries))
            push(generalEntries[entryName], (module, entry));
    }

    for (entryName, entryList in items(generalEntries))
        resolveGeneralEnvRootEntry(entries, entryName, entryList);

    for (name, module in items(generalImports)) {
        ref rootEntries = envRootEntries(envRoot(module.publicEnv));
        for (entryName, entry in items(rootEntries)) {
            if (null?(lookup(entries, entryName))) {
                entries[entryName] = entry;
            }
        }
    }
}

private resolveSpecificEnvRootEntries(entries, specificImports) {
    for (entryName, entry in items(specificImports))
        entries[entryName] = EnvRootEntry(*entry);
}

envRootEntries(envRoot: EnvRoot) = ref maybe(envRoot.entries,
    entries ref=> ref entries,
    () ref=> {
        envRoot.entries = Maybe(HashMap[String, EnvRootEntry]());
        ref entries = just(envRoot.entries);
        resolveGeneralEnvRootEntries(entries, envRoot.generalImports);
        resolveSpecificEnvRootEntries(entries, envRoot.specificImports);
        return ref entries;
    },
);

record Env = referenceType(
    parent: EnvParent,
    entries: HashMap[String, EnvEntry],
);

overload Env(parent:EnvParent) =
    Env(parent, HashMap[String, EnvEntry]());

newEnv(parent:EnvParent) = Env(parent);
[E | VariantMember?(EnvParent, E)]
overload newEnv(parent:E) = Env(EnvParent(parent));
overload newEnv() = Env(EnvParent(allocateRef(EnvRoot)));



//
// envRoot, envAdd
//

envRoot(env:EnvRoot) EnvRoot = env;
overload envRoot(env:Env) EnvRoot = envRoot(*env.parent);
overload envRoot(env:Module) EnvRoot {
    assert(false);
    return envRoot(env.privateEnv);
}
overload envRoot(env:EnvParent) EnvRoot = envRoot(*env);

envAdd(env, name:ast.Identifier, forward entry) {
    if (contains?(env.entries, name.str))
        genericError("name redefinition: ", name.str);
    env.entries[name.str] = EnvEntry(entry);
}

private envRootReset(envRoot) {
    if (just?(envRoot.entries))
        envRoot.entries = nothing(HashMap[String, EnvRootEntry]);
}

envRootAddGeneral(envRoot:EnvRoot, module:Module) {
    if (not null?(lookup(envRoot.generalImports, module.name)))
        genericError("redundant import of module ", module.name);
    envRoot.generalImports[module.name] = module;
    envRootReset(envRoot);
}

[I | VariantMember?(SpecificImport, I)]
envRootAddSpecific(envRoot:EnvRoot, asName:String, entry:I) {
    envRootAddSpecific(envRoot, asName, SpecificImport(entry));
}
overload envRootAddSpecific(envRoot:EnvRoot, asName:String, entry:SpecificImport) {
    var specImport = lookup(envRoot.specificImports, asName);
    if (null?(specImport))
        envRoot.specificImports[asName] = entry;
    else
        genericError("import of ", entry, " as ", asName, " conflicts with import of ", specImport^, " as ", asName);

    envRootReset(envRoot);
}


//
// envAddFlatAlias -- add aliases to single level of environment
//

envAddFlatAlias(env:Env, aliasEnv:Env, bindingList:ast.BindingList) {
    envAddFlatAlias(env, aliasEnv, *bindingList);
}

overload envAddFlatAlias(env:Env, aliasEnv:Env, bindingList:ast.MultipleBindingList) {
    maybe(bindingList.values,
        values ref=> {
            maybe(bindingList.names.variadicItem,
                varBindingName ref=> {
                    if (size(bindingList.names.items) != 0)
                        genericError("multiple alias binding not yet supported");
                    if (just?(varBindingName.type))
                        genericError("type declarations on alias bindings not yet supported");

                    envAdd(env, varBindingName.name, ListAlias(values, aliasEnv));
                },
                () ref=> {
                    if (size(bindingList.names.items) != 1)
                        genericError("multiple alias binding not yet supported");
                    var bindingName = bindingList.names.items[0];
                    if (just?(bindingName.type))
                        genericError("type declarations on alias bindings not yet supported");

                    if (size(values) != 1)
                        genericError("single alias variable bound to multiple value expression");
                    var value = match(values[0],
                        ast.Expr, x => x,
                        ast.UnpackExpr, x ref=> {
                            genericError("single alias variable bound to multiple value expression");
                            return ast.Expr();
                        },
                    );

                    envAdd(env, bindingName.name, Alias(value, aliasEnv));
                },
            );
        },
        () ref=> { genericError("alias variable must have a value"); },
    );
}

overload envAddFlatAlias(env:Env, aliasEnv:Env, bindingList:ast.SingleBindingList) {
    for (binding in bindingList) {
        if (just?(binding.name.type))
            genericError("type declarations on alias bindings not yet supported");
        envAdd(env, binding.name.name, Alias(binding.value, aliasEnv));
    }
}


//
// publicLookup, privateLookup, nameRefLookup
//

private _ifEnvLookup(_ifParentLookup, fromEnv:Maybe[Env], env:Env, name:String, foundFn, notFoundFn) {
    if (just?(fromEnv) and env == just(fromEnv))
        return forward ...notFoundFn();

    var ptr = lookup(env.entries, name);
    if (null?(ptr)) {
        var newFromEnv = maybe(fromEnv,
            env ref=> fromEnv,
            ()  ref=> if (variantIs?(env.parent, EnvRoot)) Maybe(env) else nothing(Env)
        );
        return forward ..._ifParentLookup(newFromEnv, env.parent, name, foundFn, notFoundFn);
    }
    return forward ...foundFn(ptr^);
}

private procedure _ifPublicLookup;

overload _ifPublicLookup(fromEnv:Maybe[Env], env:Env, name:String, foundFn, notFoundFn)
    = forward ..._ifEnvLookup(_ifPublicLookup, fromEnv, env, name, foundFn, notFoundFn);

private envRootEntryLookup(fromEnv:Maybe[Env], name:String, entry:EnvEntry, foundFn, notFoundFn)
    = forward ...foundFn(entry);
overload envRootEntryLookup(fromEnv:Maybe[Env], name:String, entry:AmbiguousEntry, foundFn, notFoundFn)
    = forward ...throwButPropagateLike(AmbiguousEntryError(name, entry), ...notFoundFn());

overload _ifPublicLookup(fromEnv:Maybe[Env], envRoot:EnvRoot, name:String, foundFn, notFoundFn) {
    ref entries = envRootEntries(envRoot);
    var ptr = lookup(entries, name);
    if (null?(ptr))
        return forward ...notFoundFn();
    else
        return forward ...envRootEntryLookup(fromEnv, name, *ptr^, foundFn, notFoundFn);
}

overload _ifPublicLookup(fromEnv:Maybe[Env], module:Module, name:String, foundFn, notFoundFn)
    = forward ..._ifPublicLookup(fromEnv, module.publicEnv, name, foundFn, notFoundFn);

overload _ifPublicLookup(fromEnv:Maybe[Env], envParent:EnvParent, name:String, foundFn, notFoundFn)
    = forward ..._ifPublicLookup(fromEnv, *envParent, name, foundFn, notFoundFn);

ifPublicLookup(env, name:String, foundFn, notFoundFn)
    = forward ..._ifPublicLookup(nothing(Env), env, name, foundFn, notFoundFn);

publicLookup(env, name) = ref ifPublicLookup(env, name,
    entry ref=> ref entry,
    () ref=> ref throwButPropagate(GenericError(printString("name not found: ", name)), EnvEntry),
);
overload publicLookup(env, name:ast.Identifier)
    = forward publicLookup(env, name.str);
overload publicLookup(env, name:StringConstant)
    = forward publicLookup(env, String(name));

publicLookup?(env, name) = ifPublicLookup(env, name, entry => true, () => false);


private _ifPrivateLookup(fromEnv:Maybe[Env], env:Env, name:String, foundFn, notFoundFn)
    = forward ..._ifEnvLookup(_ifPrivateLookup, fromEnv, env, name, foundFn, notFoundFn);

overload _ifPrivateLookup(fromEnv, env:EnvRoot, name, foundFn, notFoundFn)
    = forward ..._ifPublicLookup(fromEnv, env, name, foundFn, notFoundFn);

overload _ifPrivateLookup(fromEnv, module:Module, name, foundFn, notFoundFn)
    = forward ..._ifPublicLookup(fromEnv, module.privateEnv, name,
        foundFn,
        () => forward ..._ifPublicLookup(fromEnv, module.publicEnv, name, foundFn, notFoundFn),
    );

overload _ifPrivateLookup(fromEnv, env:EnvParent, name, foundFn, notFoundFn)
    = forward ..._ifPrivateLookup(fromEnv, *env, name, foundFn, notFoundFn);

ifPrivateLookup(env, name:String, foundFn, notFoundFn)
    = forward ..._ifPrivateLookup(nothing(Env), env, name, foundFn, notFoundFn);

privateLookup(env, name) = ref ifPrivateLookup(env, name,
    entry ref=> ref entry,
    () ref=> ref throwButPropagate(GenericError(printString("name not found: ", name)), EnvEntry),
);
overload privateLookup(env, name:ast.Identifier)
    = forward privateLookup(env, name.str);
overload privateLookup(env, name:StringConstant)
    = forward privateLookup(env, String(name));

privateLookup?(env, name) = ifPrivateLookup(env, name, entry => true, () => false);

nameRefLookup(env, nameRef:ast.NameRef)
    = match(nameRef.env,
        ast.ModuleEnvRef, m ref=> privateLookup(getProgram().modules[m.module], m.name),
        MatchDefault, x ref=> privateLookup(env, nameRef.name),
    );


//
// moduleValueLookup, namePathLookup
//

moduleValueLookup(moduleValue:ModuleValue, member:String) {
    var submoduleValue = lookup(moduleValue.submodules, member);
    if (null?(submoduleValue)) {
        return ref maybe(moduleValue.module,
            module ref=> ref publicLookup(module, member),
            ()     ref=> ref throwButPropagate(GenericError(String("qualified reference to member of module that is not imported")), EnvEntry),
        );
    } else {
        return ref submoduleValue^.envEntry;
    }
}

moduleValueLookup?(moduleValue:ModuleValue, member:String) {
    var submoduleValue = lookup(moduleValue.submodules, member);
    if (null?(submoduleValue)) {
        return maybe(moduleValue.module,
            module ref=> publicLookup?(module, member),
            ()     ref=> false,
        );
    } else {
        return true;
    }
}

private namePathLookupFailureError()
    = ref throwButPropagate(GenericError(printString("tried to access member of non-module value")), EnvEntry);

// XXX this will need to change to support fieldRef syntax
namePathLookup(lookupFn, env, namePath:Vector[ast.Identifier]) {
    assert(size(namePath) > 0);
    var entryp = &lookupFn(env, namePath[0]);

    for (component in slicedFrom(namePath, 1))
        entryp = &match(entryp^,
            Value, v ref=> ref match(v, 
                ModuleValue,  mv ref=> ref moduleValueLookup(mv, component.str),
                MatchDefault, x  ref=> ref namePathLookupFailureError(),
            ),
            MatchDefault, x ref=> ref namePathLookupFailureError(),
        );

    return ref entryp^;
}

overload privateLookup(env, namePath:Vector[ast.Identifier])
    = forward namePathLookup(privateLookup, env, namePath);
overload publicLookup(env, namePath:Vector[ast.Identifier])
    = forward namePathLookup(publicLookup, env, namePath);



//
// ValueList
//

record ValueList(
    data: SharedPointer[Vector[Value]],
);

overload ValueList() = ValueList(new Vector[Value]());

[A | Sequence?(A) and (SequenceElementType(A) == Value)]
overload ValueList(forward a:A) = ValueList(new Vector[Value](a));

[...A | equalValues?(Value, ...A)]
callbyname overload ValueList(...elements:A) =
    ValueList(new Vector[Value](...elements));

[T | VariantMember?(Value, T)]
overload ValueList(forward x:T) = ValueList(Value(x));

overload size(x:ValueList) = size(x.data^);
overload index(x:ValueList, i) = ref index(x.data^, i);
overload begin(x:ValueList) = begin(x.data^);
overload end(x:ValueList) = end(x.data^);
overload iterator(x:ValueList) = iterator(x.data^);
overload push(x:ValueList, forward ...a) { push(x.data^, ...a); }
overload hash(x:ValueList) = hash(x.data^);
overload equals?(a:ValueList, b:ValueList) = equals?(a.data^, b.data^);
overload printTo(stream, x:ValueList) {
    printTo(stream, x.data^);
}



//
// Alias
//

record Alias = referenceType(
    value: ast.Expr,
    env: Env,
);

record ListAlias = referenceType(
    value: ast.ExprList,
    env: Env,
);


//
// Value
//

variant Value = BoolValue
              | CharValue
              | IntValue
              | FloatValue
              | StringValue
              | TupleValue
              | LambdaValue
              | ModuleValue

              | SymbolHead
              | Symbol
              | Primitive
              | AliasPrimitive
              ;

overload Value() = Value(BoolValue());

record BoolValue(value: Bool);
record CharValue(value: Char);
record StringValue(value: String);
record TupleValue(elements: ValueList);
record LambdaValue(value: ast.LambdaExpr, env: EnvParent);

variant IntValue = StaticIntValue | StaticUIntValue
                 |  Int8 |  Int16 |  Int32 |  Int64
                 | UInt8 | UInt16 | UInt32 | UInt64;
variant FloatValue = Float32 | Float64;

overload IntValue() = IntValue(StaticIntValue(0i64));
overload FloatValue() = FloatValue(0.0);

[E | VariantMember?(EnvParent, E)]
overload LambdaValue(value: ast.LambdaExpr, env: E) = LambdaValue(value, EnvParent(env));


//
// StaticIntValue
//

// XXX use arbitrary-precision int here
record StaticIntValue (value:Int64);
record StaticUIntValue (value:UInt64);

StaticInteger?(X) = false;
overload StaticInteger?(static StaticIntValue) = true;
overload StaticInteger?(static StaticUIntValue) = true;

[SI, I | StaticInteger?(SI) and Integer?(I)]
overload equals?(x:SI, y:I) = x.value == y;
[SI, I | StaticInteger?(SI) and Integer?(I)]
overload equals?(x:I, y:SI) = x == y.value;
[SI, I | StaticInteger?(SI) and Integer?(I)]
overload lesser?(x:SI, y:I) = x.value < y;
[SI, I | StaticInteger?(SI) and Integer?(I)]
overload lesser?(x:I, y:SI) = x < y.value;

[SI, SJ | StaticInteger?(SI) and StaticInteger?(SJ)]
overload equals?(x:SI, y:SJ) = x.value == y.value;
[SI, SJ | StaticInteger?(SI) and StaticInteger?(SJ)]
overload lesser?(x:SI, y:SJ) = x.value == y.value;

overload Int64(x:StaticIntValue)  = x.value;
overload Int64(x:StaticUIntValue) = Int64(x.value);

// oldclay compiler bug.
// for some reason it refuses to see a UInt64(StaticIntValue) overload
/*toUInt64(x) = UInt64(x);*/
overload /*to*/UInt64(x:StaticIntValue)  = UInt64(x.value);
overload /*to*/UInt64(x:StaticUIntValue) = x.value;

private StaticIntValueArgs?(I, J)
    = VariantMember?(IntValue, I)
    and VariantMember?(IntValue, J)
    and (StaticInteger?(I) or StaticInteger?(J));

private StaticIntResultType(I, J) = StaticIntValue;
[I]
overload StaticIntResultType(static StaticUIntValue, static I) = StaticUIntValue;
[I]
overload StaticIntResultType(static I, static StaticUIntValue) = StaticUIntValue;

private StaticIntValueType(I, J) = Int64;
[I, J | inValues?(StaticUIntValue, I, J)]
overload StaticIntValueType(static I, static J) = /*to*/UInt64;

[I, J | StaticIntValueArgs?(I, J)]
private staticIntMath(fn, x:I, y:J) {
    alias ValueT = StaticIntValueType(I, J);
    alias ResultT = StaticIntResultType(I, J);
    return ResultT(fn(ValueT(x), ValueT(y)));
}

[I, J | StaticIntValueArgs?(I, J)]
overload add(x:I, y:J)       = staticIntMath(add,       x, y);
[I, J | StaticIntValueArgs?(I, J)]
overload subtract(x:I, y:J)  = staticIntMath(subtract,  x, y);
[I, J | StaticIntValueArgs?(I, J)]
overload multiply(x:I, y:J)  = staticIntMath(multiply,  x, y);
[I, J | StaticIntValueArgs?(I, J)]
overload divide(x:I, y:J)    = staticIntMath(divide,    x, y);
[I, J | StaticIntValueArgs?(I, J)]
overload remainder(x:I, y:J) = staticIntMath(remainder, x, y);

[SI | StaticInteger?(SI)]
overload plus(x:SI) = x;
[SI | StaticInteger?(SI)]
overload minus(x:SI) = SI(-x.value);

// IntValue operations

private applyToIntValue(fn, x, y) = IntValue(fn(x, y));
overload applyToIntValue(fn, x) = IntValue(fn(x));

overload equals?(x:IntValue, y:IntValue) = equals?(*x, *y);
overload lesser?(x:IntValue, y:IntValue) = lesser?(*x, *y);

overload plus (x:IntValue) = applyToIntValue(plus,  *x);
overload minus(x:IntValue) = applyToIntValue(minus, *x);

overload add      (x:IntValue, y:IntValue) = applyToIntValue(add,       *x, *y);
overload subtract (x:IntValue, y:IntValue) = applyToIntValue(subtract,  *x, *y);
overload multiply (x:IntValue, y:IntValue) = applyToIntValue(multiply,  *x, *y);
overload divide   (x:IntValue, y:IntValue) = applyToIntValue(divide,    *x, *y);
overload remainder(x:IntValue, y:IntValue) = applyToIntValue(remainder, *x, *y);

overload Int64(x:IntValue) = Int64(*x);
overload UInt64(x:IntValue) = UInt64(*x);

// Treat FloatValues as equivalent on bitwise equality, not float equality

private floatValueEquals?(x, y) = false;
[T] overload floatValueEquals?(x:T, y:T) = floatBits(x) == floatBits(y);

private floatValueHash(x) = SizeT(floatBits(x));

overload equals?(x:FloatValue, y:FloatValue) = floatValueEquals?(*x, *y);
overload hash(x:FloatValue) = floatValueHash(*x);


//
// ModuleValue
//

record ModuleValueEntry (envEntry:EnvEntry);
overload ModuleValueEntry() = ModuleValueEntry(EnvEntry(Value(ModuleValue())));

record ModuleValue (
    module: Maybe[Module],
    submodules: HashMap[String, ModuleValueEntry],
);
moduleValueSubmodule(m:ModuleValue, name:String)
    = ref nestedVariantAs(m.submodules[name].envEntry, ModuleValue);

overload equals?(m1: ModuleValue, m2: ModuleValue)
    = m1.module == m2.module;

overload ModuleValue(module:Module)
    = ModuleValue(Maybe(module), HashMap[String,ModuleValueEntry]());
overload ModuleValue(module:Maybe[Module])
    = ModuleValue(module, HashMap[String,ModuleValueEntry]());

qualifiedImportConflictError(path, name) {
    var pathString = join('.', path);
    genericError(
        "qualified import of module ", pathString, ".", name,
        " conflicts with definition ", name,
        " in module ", pathString
    );
}

private checkQualifiedImportConflicts(moduleValue, module) {
    for (name, m in items(moduleValue.submodules))
        if (publicLookup?(module, name))
            qualifiedImportConflictError(module.name.path, name);
}

addModuleValueSubmodule(moduleRef:ModuleValue, path:Vector[String], name:String, module:Maybe[Module]) {
    maybe(moduleRef.module, refModule => {
        if (publicLookup?(refModule, name))
            qualifiedImportConflictError(path, name);
    });

    ref submoduleRef = moduleValueSubmodule(moduleRef, name);
    if (nothing?(submoduleRef.module)) {
        submoduleRef.module = module;
        maybe(module, justModule => {
            checkQualifiedImportConflicts(submoduleRef, justModule);
        });
    } else if (just?(module))
        genericError("conflicting qualified imports for module ", join('.', path), ".", name);
    return ref submoduleRef;
}

overload addModuleValueSubmodule(moduleRef:ModuleValue, path:Vector[String], name:String, module:Module)
    = ref addModuleValueSubmodule(moduleRef, path, name, Maybe(module));
overload addModuleValueSubmodule(moduleRef:ModuleValue, path:Vector[String], name:String)
    = ref addModuleValueSubmodule(moduleRef, path, name, nothing(Module));

private addRootModuleValue(envRoot, moduleName) {
    var moduleRefEntry = lookup(envRoot.specificImports, moduleName.path[0]);
    if (null?(moduleRefEntry)) {
        envRootAddSpecific(envRoot, moduleName.path[0], ModuleValue());
        moduleRefEntry = &envRoot.specificImports[moduleName.path[0]];
    } else if (not nestedVariantIs?(moduleRefEntry^, ModuleValue)) {
        genericError(
            "qualified import of module ", moduleName,
            " conflicts with import of definition ", moduleRefEntry^,
            " as ", moduleName.path[0],
        );
    }
    return ref nestedVariantAs(moduleRefEntry^, ModuleValue);
}

addQualifiedModuleValue(envRoot: EnvRoot, module:Module, moduleName:ModuleName) {
    assert(size(moduleName.path) > 0);

    if (size(moduleName.path) == 1) {
        ref moduleValue = addRootModuleValue(envRoot, moduleName);
        if (just?(moduleValue.module))
            genericError(
                "qualified import of module ", moduleName.path[0],
                " conflicts with import of module ", just(moduleValue.module).name,
                " as ", moduleName.path[0],
            );
        moduleValue.module = Maybe(module);
        checkQualifiedImportConflicts(moduleValue, module);
    } else {
        var moduleRef = &addRootModuleValue(envRoot, moduleName);

        var componentPath = Vector[String](moduleName.path[0]);

        var last = size(moduleName.path) - 1;
        for (component in sliced(moduleName.path, 1, last)) {
            moduleRef = &addModuleValueSubmodule(moduleRef^, componentPath, component);
            push(componentPath, component);
        }
        var basename = moduleName.path[last];
        addModuleValueSubmodule(moduleRef^, componentPath, basename, module);
    }
}


//
// print Value
//

private printSymbol(stream, head, params) {
    printTo(stream, head.astName.name.str);
    if (not empty?(params))
        printTo(stream, params);
}

overload printTo(stream, x:Value) {
    printTo(stream, *x);
}
overload printTo(stream, x:BoolValue) {
    printTo(stream, x.value);
}
overload printTo(stream, c:CharValue) {
    printReprTo(stream, c.value);
}
overload printTo(stream, v:IntValue) {
    match(v,
        StaticIntValue,  x ref=> { printTo(stream, x.value); },
        StaticUIntValue, x ref=> { printTo(stream, x.value, "u"); },
        UInt8,  x ref=> { printTo(stream, x, "u8" ); },
        UInt16, x ref=> { printTo(stream, x, "u16"); },
        UInt32, x ref=> { printTo(stream, x, "u32"); },
        UInt64, x ref=> { printTo(stream, x, "u64"); },
        Int8,   x ref=> { printTo(stream, x, "i8" ); },
        Int16,  x ref=> { printTo(stream, x, "i16"); },
        Int32,  x ref=> { printTo(stream, x, "i32"); },
        Int64,  x ref=> { printTo(stream, x, "i64"); },
    );
}
overload printTo(stream, v:FloatValue) {
    match(v,
        Float32, x ref=> { printTo(stream, x, "f32"); },
        Float64, x ref=> { printTo(stream, x, "f64"); },
    );
}
overload printTo(stream, x:StringValue) {
    printReprTo(stream, x.value);
}
overload printTo(stream, x:TupleValue) {
    printTo(stream, "(");
    var commaOut = CommaListPrinter(&stream);
    for (element in x.elements)
        newItem(commaOut, element);
    if (size(x.elements) == 1)
        printTo(stream, ",");
    printTo(stream, ")");
}
overload printTo(stream, x:LambdaValue) {
    printTo(stream, "<lambda>");
}
overload printTo(stream, x:SymbolHead) {
    printTo(stream, x.astName.name.str);
}
overload printTo(stream, x:Symbol) {
    printSymbol(stream, x.head, x.params);
}
overload printTo(stream, x:ModuleValue) {
    maybe(x.module,
        module ref=> { printTo(stream, module.name); },
        ()     ref=> { printTo(stream, "<incomplete module name>"); },
    );
}
overload printTo(stream, x:Primitive) {
    printTo(stream, primitiveName(x.kind));
}
overload printTo(stream, x:AliasPrimitive) {
    printTo(stream, primitiveName(x.kind));
}

[T | VariantMember?(Value, T)]
overload printReprTo(stream, x:T) {
    printTo(stream, x);
}

overload printReprTo(stream, x:Value) {
    printReprTo(stream, *x);
}

overload printReprTo(stream, x:RTGlobal) {
    printSymbol(stream, x.head, x.params);
}


//
// Pattern
//

variant Pattern = Value
                | PatternCell
                | SymbolPattern
                | TuplePattern
                ;

record PatternCell = referenceType(
    value: Maybe[Value]
);

record SymbolPattern = referenceType(
    head: SymbolHead,
    params: ListPattern,
);

record TuplePattern = referenceType(
    elements: ListPattern,
);

overload Pattern() = Pattern(Value());

overload printTo(stream, x:PatternCell) {
    maybe(x.value,
        value ref=> { printTo(stream, value); },
        ()    ref=> { printTo(stream, "<uninitialized pattern cell>"); }
    );
}

overload printTo(stream, x:SymbolPattern) {
    printTo(stream, x.head, "[", x.params, "]");
}



//
// ListPattern
//

record ListPattern = referenceType(
    patterns: Vector[Pattern],
    variadicPattern: ListPatternCell,
);

record ListPatternCell = referenceType(
    values: Maybe[ValueList],
);

overload printTo(stream, x:ListPattern) {
    var commaOut = CommaListPrinter(&stream);
    for (element in x.patterns)
        newItem(commaOut, element);

    maybe(x.variadicPattern.values,
        values ref=> {
            for (value in values)
                newItem(commaOut, value);
        },
        ()    ref=> { printTo(stream, "...<uninitialized pattern cell>"); }
    );
}



//
// RTExternal
//

record RTExternalAttributes = referenceType(
    symbolName: String,
    abi: Value,
    variadic?: Bool,
    argumentTypes: ValueList,
    returnType: Maybe[Value],
);

record RTExternal = referenceType(
    ast: ast.ExternalProcedure,
    module: Module,
    name: String,
    attributes: Maybe[RTExternalAttributes],
);

overload printTo(stream, x:RTExternal) {
    printTo(stream, "external ", x.name);
}


//
// RTGlobal
//

record RTGlobal = referenceType(
    head: SymbolHead,
    params: ValueList,
    env: Env,
    attributes: TriState[RTGlobalAttributes],
);

overload RTGlobal(head:SymbolHead, params:ValueList, env:Env)
    = RTGlobal(
        head,
        params,
        env,
        TriState[RTGlobalAttributes]()
    );

record RTGlobalAttributes (
    type: Value,
);


//
// RTValue, RTValueList
//

enum RTValueKind {
    RT_VALUE_CONST,
    RT_VALUE_REF,
    RT_VALUE_RVALUE,
}

record ReferenceVariable();
record LocalVariable();

variant RTValueReferent = ReferenceVariable
                        | LocalVariable
                        | RTGlobal
                        | RTExternal;

overload RTValueReferent() = RTValueReferent(ReferenceVariable());

record RTValue = referenceType(
    kind: RTValueKind,
    type: Value,
    referent: RTValueReferent,
    name: Maybe[String],
);

equalArgument?(v:RTValue, w:RTValue) = v.kind == w.kind and v.type == w.type;

equalArguments?(vs:RTValues, ws:RTValues) {
    if (size(vs) != size(ws))
        return false;
    for (v, w in zipped(vs, ws))
        if (not equalArgument?(v, w))
            return false;
    return true;
}

globalVariable?(v:RTValue) = variantIs?(v.referent, RTGlobal);
localVariable?(v:RTValue) = variantIs?(v.referent, LocalVariable);
referenceVariable?(v:RTValue) = variantIs?(v.referent, ReferenceVariable);
variable?(v:RTValue) = localVariable?(v) or referenceVariable?(v);
immediateValue?(v:RTValue) = variantIs?(v.referent, RTExternal);

equalResult?(v:RTValue, w:RTValue)
    = v.kind == w.kind and v.type == w.type and localVariable?(v) == localVariable?(w);

equalResults?(vs:RTValues, ws:RTValues) {
    if (size(vs) != size(ws))
        return false;
    for (v, w in zipped(vs, ws))
        if (not equalResult?(v, w))
            return false;
    return true;
}

overload RTValue(kind:RTValueKind, type:Value) =
    RTValue(kind, type, ReferenceVariable(), nothing(String));
overload RTValue(kind:RTValueKind, type:Value, referent) =
    RTValue(kind, type, RTValueReferent(referent), nothing(String));
[S | String?(S)]
overload RTValue(kind:RTValueKind, type:Value, referent, forward name:S) =
    RTValue(kind, type, RTValueReferent(referent), Maybe(String(name)));
overload RTValue(kind:RTValueKind, type:Value, referent, name:ast.Identifier) =
    RTValue(kind, type, RTValueReferent(referent), name.str);
[R | VariantMember?(RTValueReferent, R)]
overload RTValue(kind:RTValueKind, type:Value, referent:R, name:Maybe[String]) =
    RTValue(kind, type, RTValueReferent(referent), name);

overload RTValue(kind:RTValueKind, type:Value, referent:RTValueReferent, name:Maybe[String])
    returned:RTValue
{
    if (not symbolType?(typeSymbol(type))) {
        genericError("invalid type: ", type);
        return RTValue();
    }
    returned <-- allocateUninitializedRefUnsafe(RTValue);
    returned.kind <-- kind;
    returned.type <-- type;
    returned.referent <-- referent;
    returned.name <-- name;
}

record RTValueList = referenceType(
    vars: Vector[RTValue],
    name: Maybe[String],
);

overload RTValueList(vars:Vector[RTValue]) = RTValueList(vars, nothing(String));
[S | String?(S)]
overload RTValueList(vars:Vector[RTValue], forward name:S)
    = RTValueList(vars, Maybe(String(name)));
overload RTValueList(vars:Vector[RTValue], name:ast.Identifier)
    = RTValueList(vars, name.str);

record RTLabel = referenceType(
    ast: ast.LabelDef,
    breakTarget: ir.BreakTargetId,
    continueTarget: ir.BreakTargetId,
);
overload RTLabel(ast, target) = RTLabel(ast, target, target);


//
// Specialization, InvokeTable
//

alias RTValues = Vector[RTValue];

record Specialization = referenceType(
    matchedOverload: Overload,
    callable: Value,
    args: RTValues,
    results: Maybe[RTValues],
    env: Env,
    body: Maybe[Vector[ir.Node]],
    internalArgs: RTValues,
    internalNamedResults: RTValues,
);

overload Specialization(o:Overload, callable:Value) {
    var s = allocateRef(Specialization);
    s.matchedOverload = o;
    s.callable = callable;
    return move(s);
}

overload Specialization(callable:Value) = Specialization(Overload(), callable);

record InvokeEntry(
    specialization: Maybe[Specialization],
);

alias InvokeTable = HashMap[ArgumentList, InvokeEntry];


//
// ArgumentList equality adapter
//

record ArgumentList(args:RTValues);

overload equals?(a:ArgumentList, b:ArgumentList)
    = equalArguments?(a.args, b.args);

overload hash(a:ArgumentList)
    = hash(map(arg => (arg.kind, arg.type), a.args));

printRTValueKindTo(stream, kind) {
    switch (kind) {
    case RT_VALUE_REF:
        printTo(stream, "ref ");
        break;
    case RT_VALUE_RVALUE:
        printTo(stream, "rvalue ");
        break;
    case RT_VALUE_CONST:
        printTo(stream, "const ");
        break;
    default:
        assert(false);
        break;
    }
}

overload printTo(stream, a:ArgumentList) {
    printTo(stream, "(");
    interleave(a.args,
        () ref=> { printTo(stream, ", "); },
        v ref=> {
            printRTValueKindTo(stream, v.kind);
            printTo(stream, v.type);
        }
    );
    printTo(stream, ")");
}


//
// safeInitialize
//

[T]
safeInitialize(x:TriState[T], initializer) {
    return triStateInitialize(x, initializer, () => {
        genericError("recursion during initialization");
    });
}



//
// program stack
//

private var _programStack = Stack[Program]();

withProgram(program:Program, f) =
    forward ...withStackValue(_programStack, program, f);

getProgram() = ref stackTop(_programStack);
getProgramMainModule() = ref mainModule(getProgram());
getProgramPreludeModule() = ref preludeModule(getProgram());

getHooks() = ref getProgram().hooks;



//
// location stack
//

record LocationEntry (
    tokens: SourceTokens,
    where: SizeT,
);

private var _locationStack = Stack[LocationEntry]();

withLocation(node, f) {
    var x = ast.getLocation(node);
    if (null?(x.tokens) or empty?(x.tokenRange))
        return forward ...f();
    var entry = LocationEntry(x.tokens, x.mainToken);
    return forward ...withStackValue(_locationStack, entry, f);
}



//
// compilation stack
//

variant CompilationEntry = StaticCallEntry
                         | CallAnalysisEntry
                         | GlobalAnalysisEntry
                         | CallCompilationEntry
                         ;

record StaticCallEntry (
    callable: Value,
    args: ValueList,
);

record CallAnalysisEntry (
    callable: Value,
    args: RTValues,
);

record GlobalAnalysisEntry (
    global: RTGlobal,
);

record CallCompilationEntry (
    callable: Value,
    args: RTValues,
);

overload printTo(stream, x:StaticCallEntry) {
    printTo(stream, "eval: ");
    printReprTo(stream, x.callable);
    printTo(stream, "(");
    printReprElementsTo(stream, x.args);
    printTo(stream, ")");
}

overload printTo(stream, x:CallAnalysisEntry) {
    printTo(stream, "analyze: ");
    printReprTo(stream, x.callable);
    printTo(stream, ArgumentList(x.args));
}

overload printTo(stream, x:ast.SingleBinding) {
    printTo(stream, x.name.name.str);
}
overload printTo(stream, x:ast.MultipleBindingList) {
    interleave(x.names.items,
        () ref=> { printTo(stream, ", "); },
        binding ref=> { printTo(stream, binding.name.str); },
    );
    maybe(x.names.variadicItem, item ref=> {
        if (not empty?(x.names.items))
            printTo(stream, ", ");
        printTo(stream, "...", item.name.str);
    });
}

overload printTo(stream, x:GlobalAnalysisEntry) {
    printTo(stream, "analyze global: ", x.global);
}

overload printTo(stream, x:CallCompilationEntry) {
    printTo(stream, "compile: ");
    printReprTo(stream, x.callable);
    printTo(stream, ArgumentList(x.args));
}

private var _compilationStack = Stack[CompilationEntry]();

withCompilationEntry(forward entry:CompilationEntry, f) =
    forward ...withStackValue(_compilationStack, entry, f);

withStaticCall(callable:Value, args:ValueList, f) {
    var entry = CompilationEntry(StaticCallEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}

withCallAnalysis(callable:Value, args:RTValues, f) {
    var entry = CompilationEntry(CallAnalysisEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}

withGlobalAnalysis(global:RTGlobal, f) {
    var entry = CompilationEntry(GlobalAnalysisEntry(global));
    return forward ...withCompilationEntry(move(entry), f);
}

withCallCompilation(callable:Value, args:RTValues, f) {
    var entry = CompilationEntry(CallCompilationEntry(callable, args));
    return forward ...withCompilationEntry(move(entry), f);
}



//
// option errors
//

record OptionError (message:String);
instance ClayError = OptionError;

optionError(forward ...msg) { throw OptionError(printString(...msg)); }

overload displayError(e:OptionError) { println(e.message); }


//
// hook initialization error
//

record HookInitializationError (error:UniqueValue[ClayError]);
instance ClayError = HookInitializationError;

hookInitializationError(ex) { throw HookInitializationError(UniqueValue(ex)); }

overload displayError(e:HookInitializationError) {
    println("The compiler failed to find all the hook symbols necessary to initialize Clay.");
    print("  ");
    displayError(e.error^);
}


//
// semantic errors
//

[T]
private SemanticError?(static T) = false;

private semanticError(...fields) = recordWithPredicate(
    SemanticError?,
    locationStack: Stack[LocationEntry],
    compilationStack: Stack[CompilationEntry],
    ...fields
);

[T, ...A | Record?(T)
           and SemanticError?(T)
           and (Tuple[...RecordFieldTypes(T)] ==
                Tuple[Stack[LocationEntry], Stack[CompilationEntry], ...A])]
callbyname overload T(...args:A) =
    T(_locationStack, _compilationStack, ...args);

variant SemanticError;

instance ClayError = SemanticError;

[T | VariantMember?(SemanticError, T)]
overload Exception(forward e:T) =
    Exception(SemanticError(e));

overload displayError(e:SemanticError) {
    displayError(*e);
}

displaySemanticError(locationStack, compilationStack, ...message) {
    if (stackEmpty?(locationStack)) {
        println(...message);
        return;
    }
    var location = stackTop(locationStack);
    var tokens = location.tokens;
    var offset = tokens.vector[location.where].range.begin;
    errorWithLocation(tokens.file, offset, ...message);
    if (not stackEmpty?(compilationStack)) {
        println("context stack: ");
        for (entry in compilationStack)
            println("    ", entry);
    }
}



//
// semantic error instances
//

record GenericError = semanticError(
    msg: String,
);

instance SemanticError = GenericError;

record StaticError = semanticError(
    values:ValueList
);

instance SemanticError = StaticError;

overload displayError(e:GenericError) {
    displaySemanticError(e.locationStack, e.compilationStack, e.msg);
}

overload displayError(e:StaticError) {
    displaySemanticError(e.locationStack, e.compilationStack, PresentStaticErrorValues(e.values));
}

private record PresentStaticErrorValues(values:ValueList);
overload printTo(stream, x:PresentStaticErrorValues) {
    for (value in x.values)
        match(value,
            StringValue, sv ref=> { printTo(stream, sv.value); },
            IntValue, iv ref=> { printTo(stream, Int64(iv)); },
            CharValue, cv ref=> { printTo(stream, cv.value); },
            MatchDefault, x ref=> { printTo(stream, x); },
        );
}

record RecursiveAnalysisError = semanticError(
);

instance SemanticError = RecursiveAnalysisError;

overload displayError(e:RecursiveAnalysisError) {
    var msg = "recursion without base case during type propagation";
    displaySemanticError(e.locationStack, e.compilationStack, msg);
}


record AmbiguousEntryError = semanticError(
    name: String,
    entry: AmbiguousEntry,
);

instance SemanticError = AmbiguousEntryError;

overload displayError(e:AmbiguousEntryError) {
    var msg = printString(
        "name ", e.name, " ambiguously imported from multiple modules:"
    );
    for (m in e.entry.modules)
        printTo(msg, "\n  ", m.0.name);
    printTo(msg, "\nuse \"import module.(name);\" form to disambiguate");
    displaySemanticError(e.locationStack, e.compilationStack, msg);
}


//
// error reporting helpers
//

genericError(...msg) {
    throw GenericError(printString(...msg));
}

recursiveAnalysisError() {
    throw RecursiveAnalysisError();
}

private valuesStr(n) =
    if (n == 1) "value" else "values";

arityError(expected, received) {
    genericError(
        "expected ", expected, " ", valuesStr(expected),
        ", but received ", received
    );
}

arityError2(minExpected, received) {
    genericError(
        "expected at least ", minExpected, " ", valuesStr(minExpected),
        ", but received ", received
    );
}

ensureArity(expected, received) {
    if (expected != received)
        arityError(expected, received);
}

ensureArity2(minExpected, received) {
    if (minExpected > received)
        arityError2(minExpected, received);
}

typeError(expected, received) {
    genericError("expected type ", expected, ", but received ", received);
}



//
// visitAST
//

visitASTLeaf(visitor, x) {}

visitASTNode(visitor, node) {
    visitASTFields(visitor, node);
}

visitASTFields(visitor, node) {
    static for (field in ...ast.astFields(node))
        visitAST(visitor, field);
}

visitAST(visitor, x) {
    visitASTLeaf(visitor, x);
}

overload visitAST(visitor, sourceAST: ast.SourceAST) {
    if (not null?(sourceAST))
        for (item in sourceAST.topLevelItems)
            visitAST(visitor, item);
}

[N | ast.ASTNode?(N)]
overload visitAST(visitor, node:N) {
    withLocation(node, () ref=> {
        visitASTNode(visitor, node);
    });
}

[T]
overload visitAST(visitor, v:Vector[T]) {
    for (elt in v)
        visitAST(visitor, elt);
}

[T]
overload visitAST(visitor, v:ast.VariadicList[T]) {
    for (elt in v.items)
        visitAST(visitor, elt);
    visitAST(visitor, v.variadicItem);
}

[V | Variant?(V)]
overload visitAST(visitor, v:V) {
    visitAST(visitor, *v);
}
