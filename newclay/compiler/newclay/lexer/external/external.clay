import newclay.common.*;
import newclay.lexer.*;
import newclay.diagnostics.*;
import maybe.*;
import parsing.combinators.wrapper.*;
import externals.*;


//
// combinator specialization
//

private var combinators = Combinators[LexerInput]();

private var Parser? = combinators.Parser?;
private var Parsers? = combinators.Parsers?;
private var ParseResult = combinators.ParseResult;

private var nextChar = combinators.nextToken;

private var condition = combinators.condition;
private var literal = combinators.literal;
private var literalString = combinators.literalString;
private var optional = combinators.optional;
private var choice = combinators.choice;
private var sequence = combinators.sequence;
private var sequenceAs = combinators.sequenceAs;
private var modify = combinators.modify;
private var repeated = combinators.repeated;
private var repeatedAs = combinators.repeatedAs;
private var zeroOrMore = combinators.zeroOrMore;
private var oneOrMore = combinators.oneOrMore;
private var zeroOrMoreAs = combinators.zeroOrMoreAs;
private var oneOrMoreAs = combinators.oneOrMoreAs;



//
// utility
//

private alias Dummy = Char;
private alias dummy = 'T';

private seq(forward ...parsers) = sequenceAs(dummy, ...parsers);

private zeroPlus(forward ...parsers) = zeroPlus(seq(...parsers));
overload zeroPlus(forward parser) = zeroOrMoreAs(dummy, parser);

private onePlus(forward ...parsers) = onePlus(seq(...parsers));
overload onePlus(forward parser) = oneOrMoreAs(dummy, parser);



//
// bounds combinator
//

[Parser]
private bounds(parser:Parser) {
    return input => {
        alias T = ParseResult(Parser);
        var start = input.current;
        return maybe(parser(input),
            x ref=> {
                x.range = DataRange(start, input.current);
                return Maybe(x);
            },
            () => nothing(T),
        );
    };
}



//
// char predicates
//

private decimalDigit?(c) = ((c >= '0') and (c <= '9'));
private hexDigit?(c) = decimalDigit?(c) or
                       ((c >= 'a') and (c <= 'f')) or
                       ((c >= 'A') and (c <= 'F'));
private octalDigit?(c) = ((c >= '0') and (c <= '7'));

private alpha?(c) = ((c >= 'a') and (c <= 'z')) or
                    ((c >= 'A') and (c <= 'Z'));



//
// identifiers and keywords
//

private identChar1?(c) = alpha?(c) or (c == '_');
private identChar2?(c) = identChar1?(c) or decimalDigit?(c) or (c == '?');

private var identChar1 = condition(identChar1?);
private var identChar2 = condition(identChar2?);
private var identStr = seq(identChar1, zeroPlus(identChar2));

private lexIdentifierOrKeyword(input) Maybe[Token] {
    var start = input.current;
    if (not nothing?(identStr(input))) {
        var data = sliced(input.file.data, start, input.current);
        var i = keywordIndex(data);
        if (i >= 0)
            return Maybe(Token(KEYWORD, i));
        return Maybe(Token(IDENTIFIER));
    }
    return nothing(Token);
}



//
// punctuation
//

private lexPunctuation(input) {
    for (i, sym in enumerated(punctuations)) {
        var parser = literalString(sym);
        var result = parser(input);
        if (not nothing?(result))
            return Maybe(Token(PUNCTUATION, i));
    }
    return nothing(Token);
}



//
// hexDigit, octalDigit, decimalDigit
//

private var hexDigit = condition(hexDigit?);
private var octalDigit = condition(octalDigit?);
private var decimalDigit = condition(decimalDigit?);



//
// char literal, string literal
//

private var hexEscape = seq('x', hexDigit, hexDigit);
private var octalEscape = seq(octalDigit, octalDigit, octalDigit);

private var escapeSeq = choice(
    'n', 'r', 't', 'a', 'b', 'f', 'v', '\\', '\'', '\"',
     hexEscape, octalEscape,
);

private var escapeChar2 = seq('\\', escapeSeq);
private escapeChar(input) = escapeChar2(input);

private var charChar = choice(
    condition(c => (c != '\\' and c != '\'')),
    escapeChar,
);

private var strChar = choice(
    condition(c => (c != '\\' and c != '\"')),
    escapeChar,
);

private var lexCharLiteral = modify(
    x => Token(CHAR_LITERAL),
    seq('\'', charChar, '\''),
);

private var lexStringLiteral = modify(
    x => Token(STRING_LITERAL),
    seq('\"', zeroPlus(strChar), '\"'),
);



//
// static index
//

private var lexStaticIndex = modify(
    x => Token(STATIC_INDEX),
    seq('.', intLiteral)
);



//
// int literal
//

private var hexDigits = seq(
    hexDigit, zeroPlus(choice('_', hexDigit))
);

private var hexInt = seq(
    "0x", hexDigits,
);

private var decimalInt = seq(
    decimalDigit, zeroPlus(choice('_', decimalDigit))
);

private var sign = choice('+', '-');

private var intType = choice(
    seq('u', '8'),
    seq('u', '1', '6'),
    seq('u', '3', '2'),
    seq('u', '6', '4'),
    seq('i', '8'),
    seq('i', '1', '6'),
    seq('i', '3', '2'),
    seq('i', '6', '4'),
    'u',
    'i',
);

private var intLiteral = seq(choice(hexInt, decimalInt), optional(intType));

private var lexIntLiteral = modify(
    x => Token(INT_LITERAL),
    intLiteral
);



//
// float literal
//

private var exponent = seq(choice('e','E'), optional(sign), decimalInt);
private var fractional = seq('.', decimalInt);

private var floatTail = choice(
    seq(fractional, optional(exponent)),
    exponent,
);

private var hexExponent = seq(choice('p','P'), optional(sign), decimalInt);
private var hexFractional = seq('.', hexDigits);

private var hexFloatTail = choice(
    seq(hexFractional, hexExponent),
    hexExponent,
);

private var decimalFloat = seq(decimalInt, floatTail);
private var hexFloat = seq(hexInt, hexFloatTail);

private var floatType = choice(
    seq('f', '3', '2'),
    seq('f', '6', '4'),
    'f',
);

private var lexFloatLiteral = modify(
    x => Token(FLOAT_LITERAL),
    choice(
        seq(choice(hexFloat, decimalFloat), optional(floatType)),
        seq(decimalInt, floatType)
    ),
);



//
// literal code
//

private var literalCodeDelimiter = literalString("\"\"\"");

private nonDelimiter(input) {
    var saved = input;
    return maybe(literalCodeDelimiter(input),
        x ref=> {
            input = move(saved);
            return nothing(Char);
        },
        () ref=> nextChar(input),
    );
}

private var lexLiteralCode = modify(
    x => Token(LITERAL_CODE),
    seq(literalCodeDelimiter, zeroPlus(nonDelimiter), literalCodeDelimiter),
);



//
// space
//

private space?(c) = inValues?(c, ' ', '\t');

private var lexSpace = modify(
    x => Token(SPACE),
    onePlus(condition(space?)),
);



//
// comments
//

private var notNewline = condition(c => (c != '\n'));

private var lexLineComment = modify(
    x => Token(COMMENT),
    seq("//", zeroPlus(notNewline)),
);

private blockCommentTail(input) {
    var saved = input;
    var lastWasStar = false;
    while (hasNext?(input)) {
        var c = next(input);
        if (lastWasStar and (c == '/'))
            return Maybe(dummy);
        lastWasStar = (c == '*');
    }
    input = saved;
    return nothing(Dummy);
}

private var lexBlockComment = modify(
    x => Token(COMMENT),
    seq("/*", blockCommentTail)
);



//
// lex one token
//

private var _lexNonspaceToken = choice(
    lexLineComment,
    lexBlockComment,
    lexCharLiteral,
    lexStaticIndex,
    lexFloatLiteral,
    lexIntLiteral,
    lexPunctuation,
    lexLiteralCode,
    lexIdentifierOrKeyword,
    lexStringLiteral,
);

private var lexNonspaceToken = bounds(_lexNonspaceToken);

private var lexToken = bounds(choice(
    lexSpace,
    _lexNonspaceToken,
));


//
// lex one line
//

private record TokensLine (
    indentation:SizeT,
    tokens:Vector[Token],
    endOfLine:Token,
);

private var lexIndentation = bounds(modify(
    x => Token(INDENTATION),
    zeroOrMore(' '),
));

private var lexLineTokens = modify(
    x => {
        var v = Vector[Token](x.0);
        push(v, move(x.1));
        return move(v);
    },
    sequence(lexNonspaceToken, zeroOrMore(lexToken)),
);

private var lexEndOfLine = bounds(modify(
    x => Token(SPACE),
    oneOrMore(choice('\n', '\r', '\f', '\v')),
));

private var lexSentinel = bounds(input => Maybe(Token(SENTINEL)));

private var lexLine = modify(
    x => TokensLine(size(x.0 .range), just(x.1, Vector[Token]()), x.2),
    sequence(
        lexIndentation,
        optional(lexLineTokens),
        lexEndOfLine,
    ),
);

private var lexFinalLine = modify(
    x => TokensLine(size(x.0 .range), just(x.1, Vector[Token]()), x.2),
    sequence(
        lexIndentation,
        optional(lexLineTokens),
        lexSentinel,
    ),
);


//
// tokenize
//

private var tokenizeLines2 = modify(
    x => {
        var lines = move(x.0);
        push(lines, x.1);
        return move(lines);
    },
    sequence(zeroOrMore(lexLine), lexFinalLine)
);

private tokenizeLines(file) {
    var input = LexerInput(file);
    var tokensLines = require(tokenizeLines2(input));
    if (input.current != size(file.data))
        throw LexerError(file, input.maxCurrent);
    return move(tokensLines);
}

private record LayoutStatement (indentation:SizeT);
private record LayoutBlock     (indentation:SizeT);
private variant LayoutContext = LayoutStatement | LayoutBlock;

private punctuation?(token, i) = token.kind == PUNCTUATION and token.subKind == i;

private procedure closeLayout;
overload closeLayout(c:LayoutStatement, line, tokens) {
    var closeBrace = find(punctuations, "}") - begin(punctuations);
    var closeParen = find(punctuations, ")") - begin(punctuations);
    var closeBracket = find(punctuations, "]") - begin(punctuations);

    // if shallower than statement, push end statement token and return true
    if (line.indentation < c.indentation) {
        push(tokens, Token(END_STATEMENT, 0_u8, line.endOfLine.range));
        return true;
    } else if (line.indentation == c.indentation and not empty?(line.tokens)) {
        ref firstToken = line.tokens[0];
        if (firstToken.kind == PUNCTUATION
            and inValues?(firstToken.subKind, closeBrace, closeParen, closeBracket))
            return false;

        push(tokens, Token(END_STATEMENT, 0_u8, line.endOfLine.range));
        return true;
    }
    return false;
}
overload closeLayout(c:LayoutBlock, line, tokens) {
    if (line.indentation <= c.indentation) {
        push(tokens, Token(CLOSE_BLOCK, 0_u8, line.endOfLine.range));
        return true;
    }
    return false;
}

private procedure endLayout;
overload endLayout(c:LayoutStatement, endToken, tokens) {
    push(tokens, Token(END_STATEMENT, 0_u8, endToken.range));
}
overload endLayout(c:LayoutBlock, endToken, tokens) {
    push(tokens, Token(CLOSE_BLOCK, 0_u8, endToken.range));
}

private layoutTokens(lines:Vector[TokensLine]) {
    var tokens = Vector[Token]();
    var contextStack = Vector[LayoutContext]();

    var colon = find(punctuations, ":") - begin(punctuations);
    var semicolon = find(punctuations, ";") - begin(punctuations);
    var openBrace = find(punctuations, "{") - begin(punctuations);
    var closeBrace = find(punctuations, "}") - begin(punctuations);

    for (line in lines) {
        if (empty?(line.tokens))
            continue;

        assert(line.tokens[0].kind != SPACE, "line should not begin with non-indentation space");

        var significantTokens = endTrimmed(
            line.tokens,
            t => inValues?(t.kind, SPACE, COMMENT)
        );
        if (empty?(significantTokens))
            continue;

        while (not empty?(contextStack)
               and closeLayout(*back(contextStack), line, tokens))
            pop(contextStack);

        if (empty?(contextStack) or not variantIs?(back(contextStack), LayoutStatement))
            push(contextStack, LayoutContext(LayoutStatement(line.indentation)));
        var statementDepth = variantAs(back(contextStack), LayoutStatement).indentation;

        var blockStart? = punctuation?(back(significantTokens), colon);
        var lineTokens = slicedUpto(significantTokens,
            size(significantTokens) - (if (blockStart?) 1 else 0)
        );

        for (token in lineTokens) {
            if (inValues?(token.kind, SPACE, COMMENT))
                continue;
            if (token.kind == PUNCTUATION) {
                if (token.subKind == semicolon)
                    push(tokens, Token(END_STATEMENT, 0_u8, token.range));
                else if (token.subKind == openBrace)
                    push(tokens, Token(OPEN_BLOCK, 0_u8, token.range));
                else if (token.subKind == closeBrace)
                    push(tokens, Token(CLOSE_BLOCK, 0_u8, token.range));
                else
                    push(tokens, token);
            } else
                push(tokens, token);
        }

        if (blockStart?) {
            push(tokens, Token(OPEN_BLOCK, 0_u8, back(significantTokens).range));
            push(contextStack, LayoutContext(LayoutBlock(statementDepth)));
        }
    }

    assert(back(lines).endOfLine.kind == SENTINEL, "no sentinel token at end of file");

    for (context in reversed(contextStack))
        endLayout(*context, back(lines).endOfLine, tokens);

    push(tokens, back(lines).endOfLine);

    return move(tokens);
}

private impl_tokenize(file:SourceFile) {
    var lines = tokenizeLines(file);

    return SourceTokens(file, layoutTokens(lines));
}

external lexer_tokenize(
    ex:ExternalException,
    inFile:Pointer[SourceFile],
    out:Pointer[SourceTokens]
) {
    wrapAsExternal(impl_tokenize, static 1, ex, inFile, out);
}

