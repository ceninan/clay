

//
// core operations
//

procedure destroy;
procedure moveUnsafe;
procedure resetUnsafe;
procedure assign;

procedure equals?;
procedure lesser?;
procedure lesserEquals?;
procedure greater?;
procedure greaterEquals?;

procedure plus;
procedure minus;

procedure add;
procedure subtract;
procedure multiply;
procedure divide;
procedure remainder;

procedure addAssign;
procedure subtractAssign;
procedure multiplyAssign;
procedure divideAssign;
procedure remainderAssign;

procedure inc;
procedure dec;

procedure shiftLeft;
procedure shiftRight;
procedure bitwiseAnd;
procedure bitwiseOr;
procedure bitwiseXor;
procedure bitwiseNot;

procedure dereference;
procedure call;
procedure fieldRef;
procedure staticIndex;



//
// uninitialized stack allocation
//

[T] uninitializedUnsafe(static T) x:T {}


//
// coordinate type predicates
//

Coordinate?(T) = CallDefined?(dereference, T);
CoordinateTargetType(T) = ...Type(...dereference(typeToLValue(T)));

RandomAccessCoordinate?(T) =
    Coordinate?(T) and
    CallDefined?(add, T, Int) and
    CallDefined?(subtract, T, Int) and
    CallDefined?(subtract, T, T);

LValueCoordinate?(T) =
    Coordinate?(T) and
    LValue?(dereference(typeToLValue(T)));

// true if adjacent coordinates point to adjacent locations in memory
ContiguousCoordinate?(T) = false;



//
// iterator type predicates
//

Iterator?(T) = CallDefined?(hasNext?, T) and CallDefined?(next, T);
IteratorTargetType(T) = ...Type(...next(typeToLValue(T)));



//
// iteration protocol
//

procedure iterator; // create iterator

procedure hasNext?; // iterator operation
procedure next;     // iterator operation



//
// reverse iteration
//

procedure reverseIterator;



//
// sequence protocol
//

procedure size;
procedure index;

procedure begin; 
procedure end;

procedure front;
procedure back;

procedure push;
procedure pop;
procedure clear;
procedure insert;
procedure remove;
procedure reserve;
procedure resize;
procedure resizeUnsafe;

procedure pushFront;
procedure popFront;

// defined for statically sized sequences like Array[T,n]
procedure StaticSize;

[S | SizedSequence?(S) and CallDefined?(begin, S)]
overload front(seq:S) = ref begin(seq)^;

[S | SizedSequence?(S) and CallDefined?(end, S)]
overload back(seq:S) {
    var i = end(seq);
    dec(i);
    return ref i^;
}


//
// sequence type predicates
//

Sequence?(T) = CallDefined?(iterator, T);
SequenceElementType(T) = ...Type(...next(iterator(typeToLValue(T))));
SizedSequence?(T) = Sequence?(T) and CallDefined?(size, T);
StaticSizedSequence?(T) = Sequence?(T) and CallDefined?(StaticSize, Static[T]);
RandomAccessSequence?(T) = Sequence?(T) and CallDefined?(index, T, Int);
LValueSequence?(T) = Sequence?(T) and LValue?(next(iterator(typeToLValue(T))));

CoordinateSequence?(T) = Sequence?(T) and CallDefined?(begin, T) and CallDefined?(end, T);
SequenceCoordinateType(T) = Type(begin(typeToLValue(T)));

SequenceIteratorType(T) = Type(iterator(typeToLValue(T)));

// true if sequence elements are stored contiguously in memory
ContiguousSequence?(T) = false;

// true if copying the sequence is efficient
LightweightSequence?(T) = false;

// true for sequences which have value semantics.
SequenceContainer?(T) = false;

// true if sequence is not single-valued (0 valued sequences are included).
MultiValuedSequence?(T) =
    Sequence?(T) and multiValued?(...Type(...next(iterator(typeToLValue(T)))));

private multiValued?(...x) = true;
overload multiValued?(x) = false;



//
// hashing
//

procedure hash;



//
// mapping protocol
//

// 'index' and 'size' are available for mappings
// 'remove' is available

procedure lookup; // get pointer to element, null if not available
procedure put;
procedure items; // iterate over all items

inline contains?(map, key) = not null?(lookup(map, key));



//
// LValue?, RValue?
//

procedure LValue?;
callbyname overload LValue?(lvalue a) = true;
callbyname overload LValue?(rvalue a) = false;

callbyname RValue?(x) = not LValue?(x);



//
// defaults
//

inline initialize(a) {
    a <-- Type(a)();
}

[T]
inline copy(a:T) = T(a);

[T]
inline move(src:T) returned:T {
    returned <-- moveUnsafe(src);
    resetUnsafe(src);
}

[T]
inline overload assign(dest:T, rvalue src:T) {
    swap(dest, src);
}

inline notEquals?(a, b) = not equals?(a, b);

inline ordered?(a, b) = (a <= b) or (b <= a);

inline overload lesserEquals?(a, b) = not lesser?(b, a);

inline overload greater?(a, b) = lesser?(b, a);

inline overload greaterEquals?(a, b) = not lesser?(a, b);

inline overload addAssign(a, b)       { a = a + b; }
inline overload subtractAssign(a, b)  { a = a - b; }
inline overload multiplyAssign(a, b)  { a = a * b; }
inline overload divideAssign(a, b)    { a = a / b; }
inline overload remainderAssign(a, b) { a = a % b; }

inline overload bitwiseAnd(a, b, c, ...rest) =
    bitwiseAnd(bitwiseAnd(a,b), c, ...rest);

inline overload bitwiseOr(a, b, c, ...rest) =
    bitwiseOr(bitwiseOr(a,b), c, ...rest);

inline overload bitwiseXor(a, b, c, ...rest) =
    bitwiseXor(bitwiseXor(a,b), c, ...rest);



//
// swap
//

inline swap(a, b) {
    var temp = moveUnsafe(a);
    a <-- moveUnsafe(b);
    b <-- move(temp);
}

[T | BitwiseMovedType?(T)]
inline overload swap(a:T, b:T) {
    alias TBytes = Array[UInt8, Int(TypeSize(T))];
    var temp = bitwiseCast(a, TBytes);
    bitwiseCast(a, TBytes) <-- bitwiseCast(b, TBytes);
    bitwiseCast(b, TBytes) <-- temp;
}


//
// min, max
//

inline min(a, b) {
    if (a <= b)
        return a;
    else
        return b;
}

inline overload min(lvalue a, lvalue b) {
    if (a <= b)
        return ref a;
    else
        return ref b;
}

inline max(a, b) {
    if (a > b)
        return a;
    else
        return b;
}

inline overload max(lvalue a, lvalue b) {
    if (a > b)
        return ref a;
    else
        return ref b;
}



//
// empty?
//

[T | SizedSequence?(T)]
inline empty?(a:T) = (size(a) == 0);



//
// ifExpression
//

procedure ifExpression;

[T]
callbyname overload ifExpression(condition, consequent:T, alternate:T) T {
    if (condition)
        return consequent;
    else
        return alternate;
}

[T]
callbyname overload ifExpression(condition, lvalue consequent:T, lvalue alternate:T) ByRef[T] {
    if (condition)
        return ref consequent;
    else
        return ref alternate;
}



//
// bitwiseCast, bitwiseAndc, bitwiseBlend
//

[T, U | TypeSize(T) >= TypeSize(U)]
inline bitwiseCast(x: T, static U) = ref Pointer[U](&x)^;

inline bitwiseAndc(a, b) = bitwiseAnd(a, bitwiseNot(b));
inline bitwiseBlend(mask, ones, zeros)
    = bitwiseOr(bitwiseAnd(ones, mask), bitwiseAndc(zeros, mask));



//
// rotateLeft, rotateRight
//

[I, J | Integer?(I) and Integer?(J)]
rotateLeft(x:I, n:J) = bitwiseOr(shiftLeft(x, n), shiftRight(x, TypeSize(I)*8 - n));

[I, J | Integer?(I) and Integer?(J)]
rotateRight(x:I, n:J) = bitwiseOr(shiftRight(x, n), shiftLeft(x, TypeSize(I)*8 - n));



//
// PrimitiveType?
//

PrimitiveType?(X) = false;
overload PrimitiveType?(static Bool) = true;
overload PrimitiveType?(static Int8) = true;
overload PrimitiveType?(static Int16) = true;
overload PrimitiveType?(static Int32) = true;
overload PrimitiveType?(static Int64) = true;
overload PrimitiveType?(static UInt8) = true;
overload PrimitiveType?(static UInt16) = true;
overload PrimitiveType?(static UInt32) = true;
overload PrimitiveType?(static UInt64) = true;
overload PrimitiveType?(static Float32) = true;
overload PrimitiveType?(static Float64) = true;
[T] overload PrimitiveType?(static Pointer[T]) = true;
[I, O] overload PrimitiveType?(static CodePointer[I, O]) = true;
[I, O] overload PrimitiveType?(static CCodePointer[I, O]) = true;
[I, O] overload PrimitiveType?(static VarArgsCCodePointer[I, O]) = true;
[I, O] overload PrimitiveType?(static StdCallCodePointer[I, O]) = true;
[I, O] overload PrimitiveType?(static FastCallCodePointer[I, O]) = true;
[T] overload PrimitiveType?(static Static[T]) = true;
[T,n] overload PrimitiveType?(static Vec[T,n]) = true;
[E | Enum?(E)] overload PrimitiveType?(static E) = true;
[...T] overload PrimitiveType?(static Union[...T]) = true;
[] overload PrimitiveType?(static Union[]) = true;
overload PrimitiveType?(static Tuple[]) = true;



//
// PrimitiveCompoundType?, PrimitiveCompoundMemberTypes
//

PrimitiveCompoundType?(X) = false;

[T,n] overload PrimitiveCompoundType?(static Array[T,n]) = true;
[...T] overload PrimitiveCompoundType?(static Tuple[...T]) = true;
[R | RegularRecord?(R)] overload PrimitiveCompoundType?(static R) = true;
[V | Variant?(V)] overload PrimitiveCompoundType?(static V) = true;

procedure PrimitiveCompoundMemberTypes;
[T,n] overload PrimitiveCompoundMemberTypes(static Array[T,n]) = T;
[...T] overload PrimitiveCompoundMemberTypes(static Tuple[...T]) = ...T;
[R | RegularRecord?(R)]
overload PrimitiveCompoundMemberTypes(static R) = ...RecordFieldTypes(R);
[V | Variant?(V)]
overload PrimitiveCompoundMemberTypes(static V) = ...VariantMembers(V);


//
// PODType?
//

PODType?(X) = false;

[T | PrimitiveType?(T)]
overload PODType?(static T) = true;

[T | PrimitiveCompoundType?(T)]
overload PODType?(static T) = allValues?(PODType?, ...PrimitiveCompoundMemberTypes(T));



//
// Finer-grained POD-related properties
//

BitwiseCopiedType?(T) = PODType?(T);
BitwiseMovedType?(T) = PODType?(T);
NotDestroyedType?(T) = PODType?(T);
NotResetType?(T) = PODType?(T);
CopyDoesNotThrowType?(T) = PODType?(T);
AssignDoesNotThrowType?(T) = PODType?(T);
BitwiseAssignedType?(T) = BitwiseCopiedType?(T) and NotDestroyedType?(T);
BitwiseMoveAssignedType?(T) = BitwiseMovedType?(T) and NotDestroyedType?(T);

[T | PrimitiveCompoundType?(T)]
overload BitwiseCopiedType?(static T)
    = allValues?(BitwiseCopiedType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload BitwiseMovedType?(static T)
    = allValues?(BitwiseMovedType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload NotDestroyedType?(static T)
    = allValues?(NotDestroyedType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload NotResetType?(static T)
    = allValues?(NotResetType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload CopyDoesNotThrowType?(static T)
    = allValues?(CopyDoesNotThrowType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload AssignDoesNotThrowType?(static T)
    = allValues?(AssignDoesNotThrowType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload BitwiseAssignedType?(static T)
    = allValues?(BitwiseAssignedType?, ...PrimitiveCompoundMemberTypes(T));
[T | PrimitiveCompoundType?(T)]
overload BitwiseMoveAssignedType?(static T)
    = allValues?(BitwiseMoveAssignedType?, ...PrimitiveCompoundMemberTypes(T));



//
// identity test
//

inline is?(x, y) = &x == &y;
inline isNot?(x, y) = not is?(x, y);
